# Generated from IDL.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,116,1449,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,1,0,5,0,324,8,0,10,0,12,0,327,9,0,1,0,4,
        0,330,8,0,11,0,12,0,331,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,373,8,1,
        1,2,1,2,1,2,1,2,4,2,379,8,2,11,2,12,2,380,1,2,1,2,1,3,1,3,1,3,3,
        3,388,8,3,1,4,1,4,1,4,1,4,1,4,1,5,3,5,396,8,5,1,5,1,5,1,5,1,6,3,
        6,402,8,6,1,6,1,6,1,6,3,6,407,8,6,1,7,5,7,410,8,7,10,7,12,7,413,
        9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,437,8,8,1,9,1,9,1,9,1,9,5,9,443,
        8,9,10,9,12,9,446,9,9,1,10,1,10,1,11,1,11,1,11,1,12,3,12,454,8,12,
        1,12,1,12,1,12,5,12,459,8,12,10,12,12,12,462,9,12,1,13,1,13,1,13,
        1,13,1,13,3,13,469,8,13,1,14,3,14,472,8,14,1,14,1,14,1,14,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,487,8,16,10,16,12,
        16,490,9,16,1,16,1,16,1,17,1,17,1,17,5,17,497,8,17,10,17,12,17,500,
        9,17,1,17,1,17,1,18,3,18,505,8,18,1,18,1,18,1,18,1,18,1,19,1,19,
        3,19,513,8,19,1,19,1,19,1,19,5,19,518,8,19,10,19,12,19,521,9,19,
        3,19,523,8,19,1,19,1,19,1,19,1,19,5,19,529,8,19,10,19,12,19,532,
        9,19,3,19,534,8,19,1,20,1,20,1,21,1,21,1,21,3,21,541,8,21,1,22,1,
        22,1,22,1,22,1,22,3,22,548,8,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,3,23,559,8,23,1,23,1,23,3,23,563,8,23,1,23,1,23,1,24,
        1,24,1,24,5,24,570,8,24,10,24,12,24,573,9,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,601,8,28,1,29,
        1,29,1,30,1,30,1,30,5,30,608,8,30,10,30,12,30,611,9,30,1,31,1,31,
        1,31,5,31,616,8,31,10,31,12,31,619,9,31,1,32,1,32,1,32,5,32,624,
        8,32,10,32,12,32,627,9,32,1,33,1,33,1,33,5,33,632,8,33,10,33,12,
        33,635,9,33,1,34,1,34,1,34,5,34,640,8,34,10,34,12,34,643,9,34,1,
        35,1,35,1,35,5,35,648,8,35,10,35,12,35,651,9,35,1,36,1,36,1,36,1,
        36,3,36,657,8,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,3,38,667,
        8,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,3,41,687,8,41,1,42,1,42,1,42,1,43,
        1,43,3,43,694,8,43,1,44,1,44,1,44,3,44,699,8,44,1,45,1,45,1,45,3,
        45,704,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,715,
        8,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,723,8,47,1,48,1,48,1,48,
        1,48,1,48,3,48,730,8,48,1,49,1,49,1,49,5,49,735,8,49,10,49,12,49,
        738,9,49,1,50,1,50,1,50,5,50,743,8,50,10,50,12,50,746,9,50,1,51,
        1,51,1,51,3,51,751,8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,
        3,54,761,8,54,1,55,1,55,3,55,765,8,55,1,56,1,56,1,56,1,56,3,56,771,
        8,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,3,60,782,8,60,
        1,61,1,61,1,61,1,61,3,61,788,8,61,1,62,1,62,1,63,1,63,1,63,3,63,
        795,8,63,1,64,1,64,1,64,3,64,800,8,64,1,65,1,65,1,65,1,65,3,65,806,
        8,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
        1,72,1,72,3,72,822,8,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,
        3,74,832,8,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,5,76,848,8,76,10,76,12,76,851,9,76,1,77,1,77,
        1,77,1,77,3,77,857,8,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,
        1,79,3,79,868,8,79,1,79,1,79,1,79,1,79,1,80,1,80,3,80,876,8,80,1,
        80,1,80,4,80,880,8,80,11,80,12,80,881,1,81,1,81,1,81,1,81,1,81,1,
        81,3,81,890,8,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,
        83,1,83,5,83,903,8,83,10,83,12,83,906,9,83,1,84,1,84,1,84,1,84,3,
        84,912,8,84,1,84,1,84,1,84,1,84,1,85,5,85,919,8,85,10,85,12,85,922,
        9,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,947,
        8,88,1,89,4,89,950,8,89,11,89,12,89,951,1,90,4,90,955,8,90,11,90,
        12,90,956,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,
        969,8,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,5,93,
        981,8,93,10,93,12,93,984,9,93,1,93,1,93,1,94,1,94,1,95,1,95,1,95,
        1,95,1,95,1,95,3,95,996,8,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,
        3,96,1005,8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,
        1016,8,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,3,98,1025,8,98,1,99,
        1,99,1,99,1,99,1,99,3,99,1032,8,99,1,100,1,100,4,100,1036,8,100,
        11,100,12,100,1037,1,101,1,101,1,101,1,101,1,102,1,102,3,102,1046,
        8,102,1,103,1,103,1,103,1,103,5,103,1052,8,103,10,103,12,103,1055,
        9,103,1,103,1,103,1,104,3,104,1060,8,104,1,104,1,104,1,104,1,104,
        3,104,1066,8,104,1,104,3,104,1069,8,104,1,105,1,105,1,106,1,106,
        1,106,3,106,1076,8,106,1,107,1,107,1,107,1,107,5,107,1082,8,107,
        10,107,12,107,1085,9,107,3,107,1087,8,107,1,107,1,107,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,110,1,110,1,110,1,110,
        1,110,5,110,1105,8,110,10,110,12,110,1108,9,110,1,110,1,110,1,111,
        1,111,1,111,1,111,1,111,5,111,1117,8,111,10,111,12,111,1120,9,111,
        1,111,1,111,1,112,1,112,1,112,1,112,3,112,1128,8,112,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,
        1,116,1,116,3,116,1145,8,116,1,117,1,117,1,117,1,117,1,117,1,117,
        1,118,1,118,3,118,1155,8,118,1,119,1,119,1,119,1,119,1,120,1,120,
        1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,5,122,1178,8,122,10,122,12,122,1181,9,122,
        3,122,1183,8,122,1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,5,124,1197,8,124,10,124,12,124,1200,9,124,
        3,124,1202,8,124,1,125,1,125,3,125,1206,8,125,1,125,3,125,1209,8,
        125,1,126,1,126,1,126,1,127,1,127,1,127,1,128,1,128,1,128,1,128,
        5,128,1221,8,128,10,128,12,128,1224,9,128,1,128,1,128,1,129,1,129,
        3,129,1230,8,129,1,130,1,130,1,130,1,131,1,131,1,131,1,131,1,131,
        1,132,1,132,1,132,3,132,1243,8,132,1,132,3,132,1246,8,132,1,133,
        1,133,1,133,1,133,5,133,1252,8,133,10,133,12,133,1255,9,133,1,134,
        1,134,1,134,1,135,5,135,1261,8,135,10,135,12,135,1264,9,135,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1285,8,136,1,137,
        1,137,1,137,1,137,1,138,1,138,1,138,3,138,1294,8,138,1,139,1,139,
        3,139,1298,8,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,141,
        1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,144,
        1,144,1,144,3,144,1321,8,144,1,144,3,144,1324,8,144,1,144,1,144,
        1,144,3,144,1329,8,144,1,145,1,145,1,145,1,146,1,146,1,146,1,147,
        1,147,5,147,1339,8,147,10,147,12,147,1342,9,147,1,147,1,147,1,148,
        1,148,1,148,1,148,3,148,1350,8,148,1,148,1,148,3,148,1354,8,148,
        1,149,1,149,1,149,1,149,3,149,1360,8,149,1,149,1,149,3,149,1364,
        8,149,1,150,1,150,1,150,1,150,3,150,1370,8,150,1,150,1,150,3,150,
        1374,8,150,1,151,1,151,1,151,3,151,1379,8,151,1,152,3,152,1382,8,
        152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,5,153,
        1393,8,153,10,153,12,153,1396,9,153,1,153,1,153,1,154,1,154,1,154,
        5,154,1403,8,154,10,154,12,154,1406,9,154,1,154,1,154,1,155,3,155,
        1411,8,155,1,155,1,155,1,155,1,155,1,156,5,156,1418,8,156,10,156,
        12,156,1421,9,156,1,157,1,157,1,157,1,157,1,157,1,157,3,157,1429,
        8,157,1,158,1,158,1,158,1,158,5,158,1435,8,158,10,158,12,158,1438,
        9,158,3,158,1440,8,158,1,159,1,159,1,159,1,159,1,160,1,160,1,160,
        1,160,0,0,161,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,0,9,2,0,87,87,95,95,1,0,33,34,1,0,25,26,3,0,
        21,21,24,24,31,31,2,0,20,20,25,26,1,0,1,10,2,0,61,61,106,106,2,0,
        62,62,108,108,3,0,37,37,58,58,88,88,1480,0,325,1,0,0,0,2,335,1,0,
        0,0,4,374,1,0,0,0,6,384,1,0,0,0,8,389,1,0,0,0,10,395,1,0,0,0,12,
        401,1,0,0,0,14,411,1,0,0,0,16,414,1,0,0,0,18,438,1,0,0,0,20,447,
        1,0,0,0,22,449,1,0,0,0,24,453,1,0,0,0,26,463,1,0,0,0,28,471,1,0,
        0,0,30,476,1,0,0,0,32,480,1,0,0,0,34,493,1,0,0,0,36,504,1,0,0,0,
        38,522,1,0,0,0,40,535,1,0,0,0,42,540,1,0,0,0,44,542,1,0,0,0,46,553,
        1,0,0,0,48,566,1,0,0,0,50,574,1,0,0,0,52,581,1,0,0,0,54,583,1,0,
        0,0,56,589,1,0,0,0,58,602,1,0,0,0,60,604,1,0,0,0,62,612,1,0,0,0,
        64,620,1,0,0,0,66,628,1,0,0,0,68,636,1,0,0,0,70,644,1,0,0,0,72,656,
        1,0,0,0,74,658,1,0,0,0,76,666,1,0,0,0,78,668,1,0,0,0,80,670,1,0,
        0,0,82,686,1,0,0,0,84,688,1,0,0,0,86,693,1,0,0,0,88,698,1,0,0,0,
        90,703,1,0,0,0,92,714,1,0,0,0,94,722,1,0,0,0,96,729,1,0,0,0,98,731,
        1,0,0,0,100,739,1,0,0,0,102,747,1,0,0,0,104,752,1,0,0,0,106,754,
        1,0,0,0,108,760,1,0,0,0,110,764,1,0,0,0,112,770,1,0,0,0,114,772,
        1,0,0,0,116,774,1,0,0,0,118,776,1,0,0,0,120,781,1,0,0,0,122,787,
        1,0,0,0,124,789,1,0,0,0,126,794,1,0,0,0,128,799,1,0,0,0,130,805,
        1,0,0,0,132,807,1,0,0,0,134,809,1,0,0,0,136,811,1,0,0,0,138,813,
        1,0,0,0,140,815,1,0,0,0,142,817,1,0,0,0,144,821,1,0,0,0,146,823,
        1,0,0,0,148,828,1,0,0,0,150,833,1,0,0,0,152,849,1,0,0,0,154,852,
        1,0,0,0,156,860,1,0,0,0,158,863,1,0,0,0,160,879,1,0,0,0,162,883,
        1,0,0,0,164,893,1,0,0,0,166,899,1,0,0,0,168,907,1,0,0,0,170,920,
        1,0,0,0,172,923,1,0,0,0,174,928,1,0,0,0,176,946,1,0,0,0,178,949,
        1,0,0,0,180,954,1,0,0,0,182,961,1,0,0,0,184,970,1,0,0,0,186,974,
        1,0,0,0,188,987,1,0,0,0,190,989,1,0,0,0,192,999,1,0,0,0,194,1008,
        1,0,0,0,196,1019,1,0,0,0,198,1026,1,0,0,0,200,1033,1,0,0,0,202,1039,
        1,0,0,0,204,1045,1,0,0,0,206,1047,1,0,0,0,208,1059,1,0,0,0,210,1070,
        1,0,0,0,212,1072,1,0,0,0,214,1077,1,0,0,0,216,1090,1,0,0,0,218,1097,
        1,0,0,0,220,1099,1,0,0,0,222,1111,1,0,0,0,224,1127,1,0,0,0,226,1129,
        1,0,0,0,228,1136,1,0,0,0,230,1138,1,0,0,0,232,1144,1,0,0,0,234,1146,
        1,0,0,0,236,1154,1,0,0,0,238,1156,1,0,0,0,240,1160,1,0,0,0,242,1164,
        1,0,0,0,244,1170,1,0,0,0,246,1184,1,0,0,0,248,1189,1,0,0,0,250,1208,
        1,0,0,0,252,1210,1,0,0,0,254,1213,1,0,0,0,256,1216,1,0,0,0,258,1229,
        1,0,0,0,260,1231,1,0,0,0,262,1234,1,0,0,0,264,1239,1,0,0,0,266,1247,
        1,0,0,0,268,1256,1,0,0,0,270,1262,1,0,0,0,272,1265,1,0,0,0,274,1286,
        1,0,0,0,276,1290,1,0,0,0,278,1295,1,0,0,0,280,1302,1,0,0,0,282,1306,
        1,0,0,0,284,1310,1,0,0,0,286,1314,1,0,0,0,288,1317,1,0,0,0,290,1330,
        1,0,0,0,292,1333,1,0,0,0,294,1336,1,0,0,0,296,1353,1,0,0,0,298,1355,
        1,0,0,0,300,1365,1,0,0,0,302,1378,1,0,0,0,304,1381,1,0,0,0,306,1386,
        1,0,0,0,308,1399,1,0,0,0,310,1410,1,0,0,0,312,1419,1,0,0,0,314,1422,
        1,0,0,0,316,1439,1,0,0,0,318,1441,1,0,0,0,320,1445,1,0,0,0,322,324,
        3,234,117,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,
        326,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,328,330,3,2,1,0,329,
        328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,
        333,1,0,0,0,333,334,5,0,0,1,334,1,1,0,0,0,335,372,3,312,156,0,336,
        337,3,82,41,0,337,338,5,11,0,0,338,373,1,0,0,0,339,340,3,54,27,0,
        340,341,5,11,0,0,341,373,1,0,0,0,342,343,3,206,103,0,343,344,5,11,
        0,0,344,373,1,0,0,0,345,346,3,6,3,0,346,347,5,11,0,0,347,373,1,0,
        0,0,348,349,3,4,2,0,349,350,5,11,0,0,350,373,1,0,0,0,351,352,3,26,
        13,0,352,353,5,11,0,0,353,373,1,0,0,0,354,355,3,238,119,0,355,356,
        5,11,0,0,356,373,1,0,0,0,357,358,3,240,120,0,358,359,5,11,0,0,359,
        373,1,0,0,0,360,361,3,302,151,0,361,362,5,11,0,0,362,373,1,0,0,0,
        363,364,3,258,129,0,364,365,5,11,0,0,365,373,1,0,0,0,366,367,3,286,
        143,0,367,368,5,11,0,0,368,373,1,0,0,0,369,370,3,144,72,0,370,371,
        5,11,0,0,371,373,1,0,0,0,372,336,1,0,0,0,372,339,1,0,0,0,372,342,
        1,0,0,0,372,345,1,0,0,0,372,348,1,0,0,0,372,351,1,0,0,0,372,354,
        1,0,0,0,372,357,1,0,0,0,372,360,1,0,0,0,372,363,1,0,0,0,372,366,
        1,0,0,0,372,369,1,0,0,0,373,3,1,0,0,0,374,375,5,74,0,0,375,376,3,
        320,160,0,376,378,5,14,0,0,377,379,3,2,1,0,378,377,1,0,0,0,379,380,
        1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,
        5,15,0,0,383,5,1,0,0,0,384,387,3,312,156,0,385,388,3,8,4,0,386,388,
        3,10,5,0,387,385,1,0,0,0,387,386,1,0,0,0,388,7,1,0,0,0,389,390,3,
        12,6,0,390,391,5,14,0,0,391,392,3,14,7,0,392,393,5,15,0,0,393,9,
        1,0,0,0,394,396,7,0,0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,
        1,0,0,0,397,398,5,97,0,0,398,399,3,320,160,0,399,11,1,0,0,0,400,
        402,7,0,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,
        404,5,97,0,0,404,406,3,320,160,0,405,407,3,18,9,0,406,405,1,0,0,
        0,406,407,1,0,0,0,407,13,1,0,0,0,408,410,3,16,8,0,409,408,1,0,0,
        0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,15,1,0,0,0,
        413,411,1,0,0,0,414,436,3,312,156,0,415,416,3,82,41,0,416,417,5,
        11,0,0,417,437,1,0,0,0,418,419,3,54,27,0,419,420,5,11,0,0,420,437,
        1,0,0,0,421,422,3,206,103,0,422,423,5,11,0,0,423,437,1,0,0,0,424,
        425,3,204,102,0,425,426,5,11,0,0,426,437,1,0,0,0,427,428,3,208,104,
        0,428,429,5,11,0,0,429,437,1,0,0,0,430,431,3,238,119,0,431,432,5,
        11,0,0,432,437,1,0,0,0,433,434,3,240,120,0,434,435,5,11,0,0,435,
        437,1,0,0,0,436,415,1,0,0,0,436,418,1,0,0,0,436,421,1,0,0,0,436,
        424,1,0,0,0,436,427,1,0,0,0,436,430,1,0,0,0,436,433,1,0,0,0,437,
        17,1,0,0,0,438,439,5,12,0,0,439,444,3,20,10,0,440,441,5,13,0,0,441,
        443,3,20,10,0,442,440,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,
        445,1,0,0,0,445,19,1,0,0,0,446,444,1,0,0,0,447,448,3,22,11,0,448,
        21,1,0,0,0,449,450,3,312,156,0,450,451,3,24,12,0,451,23,1,0,0,0,
        452,454,5,32,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,
        455,460,5,113,0,0,456,457,5,32,0,0,457,459,5,113,0,0,458,456,1,0,
        0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,25,1,0,0,
        0,462,460,1,0,0,0,463,468,3,312,156,0,464,469,3,34,17,0,465,469,
        3,32,16,0,466,469,3,30,15,0,467,469,3,28,14,0,468,464,1,0,0,0,468,
        465,1,0,0,0,468,466,1,0,0,0,468,467,1,0,0,0,469,27,1,0,0,0,470,472,
        5,87,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,
        5,72,0,0,474,475,3,320,160,0,475,29,1,0,0,0,476,477,5,72,0,0,477,
        478,3,320,160,0,478,479,3,86,43,0,479,31,1,0,0,0,480,481,5,87,0,
        0,481,482,5,72,0,0,482,483,3,320,160,0,483,484,3,38,19,0,484,488,
        5,14,0,0,485,487,3,16,8,0,486,485,1,0,0,0,487,490,1,0,0,0,488,486,
        1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,488,1,0,0,0,491,492,
        5,15,0,0,492,33,1,0,0,0,493,494,3,36,18,0,494,498,5,14,0,0,495,497,
        3,42,21,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,
        1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,502,5,15,0,0,502,35,
        1,0,0,0,503,505,5,45,0,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,
        1,0,0,0,506,507,5,72,0,0,507,508,3,320,160,0,508,509,3,38,19,0,509,
        37,1,0,0,0,510,512,5,12,0,0,511,513,5,76,0,0,512,511,1,0,0,0,512,
        513,1,0,0,0,513,514,1,0,0,0,514,519,3,40,20,0,515,516,5,13,0,0,516,
        518,3,40,20,0,517,515,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,
        520,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,522,510,1,0,0,0,522,
        523,1,0,0,0,523,533,1,0,0,0,524,525,5,73,0,0,525,530,3,20,10,0,526,
        527,5,13,0,0,527,529,3,20,10,0,528,526,1,0,0,0,529,532,1,0,0,0,530,
        528,1,0,0,0,530,531,1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,533,
        524,1,0,0,0,533,534,1,0,0,0,534,39,1,0,0,0,535,536,3,22,11,0,536,
        41,1,0,0,0,537,541,3,16,8,0,538,541,3,44,22,0,539,541,3,46,23,0,
        540,537,1,0,0,0,540,538,1,0,0,0,540,539,1,0,0,0,541,43,1,0,0,0,542,
        547,3,312,156,0,543,544,5,60,0,0,544,548,3,312,156,0,545,546,5,55,
        0,0,546,548,3,312,156,0,547,543,1,0,0,0,547,545,1,0,0,0,548,549,
        1,0,0,0,549,550,3,86,43,0,550,551,3,100,50,0,551,552,5,11,0,0,552,
        45,1,0,0,0,553,554,3,312,156,0,554,555,5,67,0,0,555,556,3,320,160,
        0,556,558,5,16,0,0,557,559,3,48,24,0,558,557,1,0,0,0,558,559,1,0,
        0,0,559,560,1,0,0,0,560,562,5,17,0,0,561,563,3,220,110,0,562,561,
        1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,5,11,0,0,565,47,
        1,0,0,0,566,571,3,50,25,0,567,568,5,13,0,0,568,570,3,50,25,0,569,
        567,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,
        49,1,0,0,0,573,571,1,0,0,0,574,575,3,312,156,0,575,576,3,52,26,0,
        576,577,3,312,156,0,577,578,3,224,112,0,578,579,3,312,156,0,579,
        580,3,104,52,0,580,51,1,0,0,0,581,582,5,58,0,0,582,53,1,0,0,0,583,
        584,5,70,0,0,584,585,3,56,28,0,585,586,3,320,160,0,586,587,5,30,
        0,0,587,588,3,58,29,0,588,55,1,0,0,0,589,600,3,312,156,0,590,601,
        3,110,55,0,591,601,3,132,66,0,592,601,3,134,67,0,593,601,3,136,68,
        0,594,601,3,108,54,0,595,601,3,196,98,0,596,601,3,198,99,0,597,601,
        3,228,114,0,598,601,3,24,12,0,599,601,3,138,69,0,600,590,1,0,0,0,
        600,591,1,0,0,0,600,592,1,0,0,0,600,593,1,0,0,0,600,594,1,0,0,0,
        600,595,1,0,0,0,600,596,1,0,0,0,600,597,1,0,0,0,600,598,1,0,0,0,
        600,599,1,0,0,0,601,57,1,0,0,0,602,603,3,60,30,0,603,59,1,0,0,0,
        604,609,3,62,31,0,605,606,5,29,0,0,606,608,3,62,31,0,607,605,1,0,
        0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,61,1,0,0,
        0,611,609,1,0,0,0,612,617,3,64,32,0,613,614,5,27,0,0,614,616,3,64,
        32,0,615,613,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,
        0,0,618,63,1,0,0,0,619,617,1,0,0,0,620,625,3,66,33,0,621,622,5,28,
        0,0,622,624,3,66,33,0,623,621,1,0,0,0,624,627,1,0,0,0,625,623,1,
        0,0,0,625,626,1,0,0,0,626,65,1,0,0,0,627,625,1,0,0,0,628,633,3,68,
        34,0,629,630,7,1,0,0,630,632,3,68,34,0,631,629,1,0,0,0,632,635,1,
        0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,67,1,0,0,0,635,633,1,0,
        0,0,636,641,3,70,35,0,637,638,7,2,0,0,638,640,3,70,35,0,639,637,
        1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,69,1,
        0,0,0,643,641,1,0,0,0,644,649,3,72,36,0,645,646,7,3,0,0,646,648,
        3,72,36,0,647,645,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,
        1,0,0,0,650,71,1,0,0,0,651,649,1,0,0,0,652,653,3,74,37,0,653,654,
        3,76,38,0,654,657,1,0,0,0,655,657,3,76,38,0,656,652,1,0,0,0,656,
        655,1,0,0,0,657,73,1,0,0,0,658,659,7,4,0,0,659,75,1,0,0,0,660,667,
        3,24,12,0,661,667,3,78,39,0,662,663,5,16,0,0,663,664,3,58,29,0,664,
        665,5,17,0,0,665,667,1,0,0,0,666,660,1,0,0,0,666,661,1,0,0,0,666,
        662,1,0,0,0,667,77,1,0,0,0,668,669,7,5,0,0,669,79,1,0,0,0,670,671,
        3,58,29,0,671,81,1,0,0,0,672,673,5,42,0,0,673,674,3,312,156,0,674,
        675,3,84,42,0,675,687,1,0,0,0,676,687,3,168,84,0,677,687,3,174,87,
        0,678,687,3,186,93,0,679,687,3,158,79,0,680,687,3,164,82,0,681,682,
        5,50,0,0,682,683,3,312,156,0,683,684,3,104,52,0,684,687,1,0,0,0,
        685,687,3,232,116,0,686,672,1,0,0,0,686,676,1,0,0,0,686,677,1,0,
        0,0,686,678,1,0,0,0,686,679,1,0,0,0,686,680,1,0,0,0,686,681,1,0,
        0,0,686,685,1,0,0,0,687,83,1,0,0,0,688,689,3,86,43,0,689,690,3,100,
        50,0,690,85,1,0,0,0,691,694,3,88,44,0,692,694,3,96,48,0,693,691,
        1,0,0,0,693,692,1,0,0,0,694,87,1,0,0,0,695,699,3,92,46,0,696,699,
        3,94,47,0,697,699,3,24,12,0,698,695,1,0,0,0,698,696,1,0,0,0,698,
        697,1,0,0,0,699,89,1,0,0,0,700,704,3,110,55,0,701,704,3,136,68,0,
        702,704,3,138,69,0,703,700,1,0,0,0,703,701,1,0,0,0,703,702,1,0,0,
        0,704,91,1,0,0,0,705,715,3,108,54,0,706,715,3,110,55,0,707,715,3,
        132,66,0,708,715,3,134,67,0,709,715,3,136,68,0,710,715,3,138,69,
        0,711,715,3,140,70,0,712,715,3,142,71,0,713,715,3,230,115,0,714,
        705,1,0,0,0,714,706,1,0,0,0,714,707,1,0,0,0,714,708,1,0,0,0,714,
        709,1,0,0,0,714,710,1,0,0,0,714,711,1,0,0,0,714,712,1,0,0,0,714,
        713,1,0,0,0,715,93,1,0,0,0,716,723,3,190,95,0,717,723,3,192,96,0,
        718,723,3,194,97,0,719,723,3,196,98,0,720,723,3,198,99,0,721,723,
        3,226,113,0,722,716,1,0,0,0,722,717,1,0,0,0,722,718,1,0,0,0,722,
        719,1,0,0,0,722,720,1,0,0,0,722,721,1,0,0,0,723,95,1,0,0,0,724,730,
        3,168,84,0,725,730,3,174,87,0,726,730,3,186,93,0,727,730,3,158,79,
        0,728,730,3,164,82,0,729,724,1,0,0,0,729,725,1,0,0,0,729,726,1,0,
        0,0,729,727,1,0,0,0,729,728,1,0,0,0,730,97,1,0,0,0,731,736,3,320,
        160,0,732,733,5,13,0,0,733,735,3,320,160,0,734,732,1,0,0,0,735,738,
        1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,99,1,0,0,0,738,736,1,
        0,0,0,739,744,3,102,51,0,740,741,5,13,0,0,741,743,3,102,51,0,742,
        740,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,
        101,1,0,0,0,746,744,1,0,0,0,747,750,3,312,156,0,748,751,3,104,52,
        0,749,751,3,106,53,0,750,748,1,0,0,0,750,749,1,0,0,0,751,103,1,0,
        0,0,752,753,5,113,0,0,753,105,1,0,0,0,754,755,3,200,100,0,755,107,
        1,0,0,0,756,761,5,84,0,0,757,761,5,91,0,0,758,759,5,62,0,0,759,761,
        5,91,0,0,760,756,1,0,0,0,760,757,1,0,0,0,760,758,1,0,0,0,761,109,
        1,0,0,0,762,765,3,112,56,0,763,765,3,122,61,0,764,762,1,0,0,0,764,
        763,1,0,0,0,765,111,1,0,0,0,766,771,3,116,58,0,767,771,3,118,59,
        0,768,771,3,120,60,0,769,771,3,114,57,0,770,766,1,0,0,0,770,767,
        1,0,0,0,770,768,1,0,0,0,770,769,1,0,0,0,771,113,1,0,0,0,772,773,
        5,104,0,0,773,115,1,0,0,0,774,775,7,6,0,0,775,117,1,0,0,0,776,777,
        7,7,0,0,777,119,1,0,0,0,778,779,5,62,0,0,779,782,5,62,0,0,780,782,
        5,110,0,0,781,778,1,0,0,0,781,780,1,0,0,0,782,121,1,0,0,0,783,788,
        3,126,63,0,784,788,3,128,64,0,785,788,3,130,65,0,786,788,3,124,62,
        0,787,783,1,0,0,0,787,784,1,0,0,0,787,785,1,0,0,0,787,786,1,0,0,
        0,788,123,1,0,0,0,789,790,5,105,0,0,790,125,1,0,0,0,791,792,5,77,
        0,0,792,795,5,61,0,0,793,795,5,107,0,0,794,791,1,0,0,0,794,793,1,
        0,0,0,795,127,1,0,0,0,796,797,5,77,0,0,797,800,5,62,0,0,798,800,
        5,109,0,0,799,796,1,0,0,0,799,798,1,0,0,0,800,129,1,0,0,0,801,802,
        5,77,0,0,802,803,5,62,0,0,803,806,5,62,0,0,804,806,5,111,0,0,805,
        801,1,0,0,0,805,804,1,0,0,0,806,131,1,0,0,0,807,808,5,82,0,0,808,
        133,1,0,0,0,809,810,5,57,0,0,810,135,1,0,0,0,811,812,5,85,0,0,812,
        137,1,0,0,0,813,814,5,46,0,0,814,139,1,0,0,0,815,816,5,81,0,0,816,
        141,1,0,0,0,817,818,5,75,0,0,818,143,1,0,0,0,819,822,3,146,73,0,
        820,822,3,156,78,0,821,819,1,0,0,0,821,820,1,0,0,0,822,145,1,0,0,
        0,823,824,3,148,74,0,824,825,5,14,0,0,825,826,3,152,76,0,826,827,
        5,15,0,0,827,147,1,0,0,0,828,829,5,112,0,0,829,831,3,320,160,0,830,
        832,3,150,75,0,831,830,1,0,0,0,831,832,1,0,0,0,832,149,1,0,0,0,833,
        834,5,12,0,0,834,835,3,24,12,0,835,151,1,0,0,0,836,848,3,154,77,
        0,837,838,3,186,93,0,838,839,5,11,0,0,839,848,1,0,0,0,840,841,3,
        54,27,0,841,842,5,11,0,0,842,848,1,0,0,0,843,844,5,42,0,0,844,845,
        3,84,42,0,845,846,5,11,0,0,846,848,1,0,0,0,847,836,1,0,0,0,847,837,
        1,0,0,0,847,840,1,0,0,0,847,843,1,0,0,0,848,851,1,0,0,0,849,847,
        1,0,0,0,849,850,1,0,0,0,850,153,1,0,0,0,851,849,1,0,0,0,852,853,
        3,56,28,0,853,856,3,104,52,0,854,855,5,59,0,0,855,857,3,58,29,0,
        856,854,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,859,5,11,0,0,
        859,155,1,0,0,0,860,861,5,112,0,0,861,862,3,24,12,0,862,157,1,0,
        0,0,863,864,5,102,0,0,864,867,3,320,160,0,865,866,5,12,0,0,866,868,
        3,24,12,0,867,865,1,0,0,0,867,868,1,0,0,0,868,869,1,0,0,0,869,870,
        5,14,0,0,870,871,3,160,80,0,871,872,5,15,0,0,872,159,1,0,0,0,873,
        875,3,162,81,0,874,876,3,98,49,0,875,874,1,0,0,0,875,876,1,0,0,0,
        876,877,1,0,0,0,877,878,5,11,0,0,878,880,1,0,0,0,879,873,1,0,0,0,
        880,881,1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,161,1,0,0,0,
        883,884,3,312,156,0,884,885,5,101,0,0,885,886,5,22,0,0,886,889,3,
        80,40,0,887,888,5,13,0,0,888,890,3,90,45,0,889,887,1,0,0,0,889,890,
        1,0,0,0,890,891,1,0,0,0,891,892,5,23,0,0,892,163,1,0,0,0,893,894,
        5,103,0,0,894,895,3,320,160,0,895,896,5,14,0,0,896,897,3,166,83,
        0,897,898,5,15,0,0,898,165,1,0,0,0,899,904,3,320,160,0,900,901,5,
        13,0,0,901,903,3,320,160,0,902,900,1,0,0,0,903,906,1,0,0,0,904,902,
        1,0,0,0,904,905,1,0,0,0,905,167,1,0,0,0,906,904,1,0,0,0,907,908,
        5,49,0,0,908,911,3,320,160,0,909,910,5,12,0,0,910,912,3,24,12,0,
        911,909,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,914,5,14,0,0,
        914,915,3,170,85,0,915,916,5,15,0,0,916,169,1,0,0,0,917,919,3,172,
        86,0,918,917,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,
        0,0,921,171,1,0,0,0,922,920,1,0,0,0,923,924,3,312,156,0,924,925,
        3,86,43,0,925,926,3,100,50,0,926,927,5,11,0,0,927,173,1,0,0,0,928,
        929,5,79,0,0,929,930,3,320,160,0,930,931,5,40,0,0,931,932,5,16,0,
        0,932,933,3,312,156,0,933,934,3,176,88,0,934,935,5,17,0,0,935,936,
        5,14,0,0,936,937,3,178,89,0,937,938,5,15,0,0,938,175,1,0,0,0,939,
        947,3,110,55,0,940,947,3,132,66,0,941,947,3,134,67,0,942,947,3,138,
        69,0,943,947,3,136,68,0,944,947,3,186,93,0,945,947,3,24,12,0,946,
        939,1,0,0,0,946,940,1,0,0,0,946,941,1,0,0,0,946,942,1,0,0,0,946,
        943,1,0,0,0,946,944,1,0,0,0,946,945,1,0,0,0,947,177,1,0,0,0,948,
        950,3,180,90,0,949,948,1,0,0,0,950,951,1,0,0,0,951,949,1,0,0,0,951,
        952,1,0,0,0,952,179,1,0,0,0,953,955,3,182,91,0,954,953,1,0,0,0,955,
        956,1,0,0,0,956,954,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,
        959,3,184,92,0,959,960,5,11,0,0,960,181,1,0,0,0,961,968,3,312,156,
        0,962,963,5,83,0,0,963,964,3,58,29,0,964,965,5,12,0,0,965,969,1,
        0,0,0,966,967,5,59,0,0,967,969,5,12,0,0,968,962,1,0,0,0,968,966,
        1,0,0,0,969,183,1,0,0,0,970,971,3,312,156,0,971,972,3,86,43,0,972,
        973,3,102,51,0,973,185,1,0,0,0,974,975,5,63,0,0,975,976,3,320,160,
        0,976,977,5,14,0,0,977,982,3,188,94,0,978,979,5,13,0,0,979,981,3,
        188,94,0,980,978,1,0,0,0,981,984,1,0,0,0,982,980,1,0,0,0,982,983,
        1,0,0,0,983,985,1,0,0,0,984,982,1,0,0,0,985,986,5,15,0,0,986,187,
        1,0,0,0,987,988,3,320,160,0,988,189,1,0,0,0,989,990,5,47,0,0,990,
        991,5,22,0,0,991,992,3,312,156,0,992,995,3,88,44,0,993,994,5,13,
        0,0,994,996,3,80,40,0,995,993,1,0,0,0,995,996,1,0,0,0,996,997,1,
        0,0,0,997,998,5,23,0,0,998,191,1,0,0,0,999,1000,5,99,0,0,1000,1001,
        5,22,0,0,1001,1004,3,88,44,0,1002,1003,5,13,0,0,1003,1005,3,80,40,
        0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1007,
        5,23,0,0,1007,193,1,0,0,0,1008,1009,5,100,0,0,1009,1010,5,22,0,0,
        1010,1011,3,88,44,0,1011,1012,5,13,0,0,1012,1015,3,88,44,0,1013,
        1014,5,13,0,0,1014,1016,3,80,40,0,1015,1013,1,0,0,0,1015,1016,1,
        0,0,0,1016,1017,1,0,0,0,1017,1018,5,23,0,0,1018,195,1,0,0,0,1019,
        1024,5,39,0,0,1020,1021,5,22,0,0,1021,1022,3,80,40,0,1022,1023,5,
        23,0,0,1023,1025,1,0,0,0,1024,1020,1,0,0,0,1024,1025,1,0,0,0,1025,
        197,1,0,0,0,1026,1031,5,64,0,0,1027,1028,5,22,0,0,1028,1029,3,80,
        40,0,1029,1030,5,23,0,0,1030,1032,1,0,0,0,1031,1027,1,0,0,0,1031,
        1032,1,0,0,0,1032,199,1,0,0,0,1033,1035,5,113,0,0,1034,1036,3,202,
        101,0,1035,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1035,1,0,0,0,1037,
        1038,1,0,0,0,1038,201,1,0,0,0,1039,1040,5,18,0,0,1040,1041,3,80,
        40,0,1041,1042,5,19,0,0,1042,203,1,0,0,0,1043,1046,3,242,121,0,1044,
        1046,3,246,123,0,1045,1043,1,0,0,0,1045,1044,1,0,0,0,1046,205,1,
        0,0,0,1047,1048,5,68,0,0,1048,1049,3,320,160,0,1049,1053,5,14,0,
        0,1050,1052,3,172,86,0,1051,1050,1,0,0,0,1052,1055,1,0,0,0,1053,
        1051,1,0,0,0,1053,1054,1,0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,
        0,1056,1057,5,15,0,0,1057,207,1,0,0,0,1058,1060,3,210,105,0,1059,
        1058,1,0,0,0,1059,1060,1,0,0,0,1060,1061,1,0,0,0,1061,1062,3,212,
        106,0,1062,1063,3,320,160,0,1063,1065,3,214,107,0,1064,1066,3,220,
        110,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,
        1069,3,222,111,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,209,1,
        0,0,0,1070,1071,5,80,0,0,1071,211,1,0,0,0,1072,1075,3,312,156,0,
        1073,1076,3,224,112,0,1074,1076,5,54,0,0,1075,1073,1,0,0,0,1075,
        1074,1,0,0,0,1076,213,1,0,0,0,1077,1086,5,16,0,0,1078,1083,3,216,
        108,0,1079,1080,5,13,0,0,1080,1082,3,216,108,0,1081,1079,1,0,0,0,
        1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,1087,
        1,0,0,0,1085,1083,1,0,0,0,1086,1078,1,0,0,0,1086,1087,1,0,0,0,1087,
        1088,1,0,0,0,1088,1089,5,17,0,0,1089,215,1,0,0,0,1090,1091,3,312,
        156,0,1091,1092,3,218,109,0,1092,1093,3,312,156,0,1093,1094,3,224,
        112,0,1094,1095,3,312,156,0,1095,1096,3,104,52,0,1096,217,1,0,0,
        0,1097,1098,7,8,0,0,1098,219,1,0,0,0,1099,1100,5,53,0,0,1100,1101,
        5,16,0,0,1101,1106,3,22,11,0,1102,1103,5,13,0,0,1103,1105,3,22,11,
        0,1104,1102,1,0,0,0,1105,1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,
        1,0,0,0,1107,1109,1,0,0,0,1108,1106,1,0,0,0,1109,1110,5,17,0,0,1110,
        221,1,0,0,0,1111,1112,5,65,0,0,1112,1113,5,16,0,0,1113,1118,5,9,
        0,0,1114,1115,5,13,0,0,1115,1117,5,9,0,0,1116,1114,1,0,0,0,1117,
        1120,1,0,0,0,1118,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1121,1,0,0,
        0,1120,1118,1,0,0,0,1121,1122,5,17,0,0,1122,223,1,0,0,0,1123,1128,
        3,92,46,0,1124,1128,3,196,98,0,1125,1128,3,198,99,0,1126,1128,3,
        24,12,0,1127,1123,1,0,0,0,1127,1124,1,0,0,0,1127,1125,1,0,0,0,1127,
        1126,1,0,0,0,1128,225,1,0,0,0,1129,1130,5,78,0,0,1130,1131,5,22,
        0,0,1131,1132,3,80,40,0,1132,1133,5,13,0,0,1133,1134,3,80,40,0,1134,
        1135,5,23,0,0,1135,227,1,0,0,0,1136,1137,5,78,0,0,1137,229,1,0,0,
        0,1138,1139,5,71,0,0,1139,231,1,0,0,0,1140,1141,5,49,0,0,1141,1145,
        5,113,0,0,1142,1143,5,79,0,0,1143,1145,5,113,0,0,1144,1140,1,0,0,
        0,1144,1142,1,0,0,0,1145,233,1,0,0,0,1146,1147,3,312,156,0,1147,
        1148,5,48,0,0,1148,1149,3,312,156,0,1149,1150,3,236,118,0,1150,1151,
        5,11,0,0,1151,235,1,0,0,0,1152,1155,3,24,12,0,1153,1155,5,9,0,0,
        1154,1152,1,0,0,0,1154,1153,1,0,0,0,1155,237,1,0,0,0,1156,1157,5,
        93,0,0,1157,1158,3,22,11,0,1158,1159,5,9,0,0,1159,239,1,0,0,0,1160,
        1161,5,92,0,0,1161,1162,3,22,11,0,1162,1163,5,9,0,0,1163,241,1,0,
        0,0,1164,1165,5,51,0,0,1165,1166,5,94,0,0,1166,1167,3,312,156,0,
        1167,1168,3,224,112,0,1168,1169,3,244,122,0,1169,243,1,0,0,0,1170,
        1171,3,312,156,0,1171,1182,3,104,52,0,1172,1183,3,220,110,0,1173,
        1174,5,13,0,0,1174,1175,3,312,156,0,1175,1176,3,104,52,0,1176,1178,
        1,0,0,0,1177,1173,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,1179,
        1180,1,0,0,0,1180,1183,1,0,0,0,1181,1179,1,0,0,0,1182,1172,1,0,0,
        0,1182,1179,1,0,0,0,1183,245,1,0,0,0,1184,1185,5,94,0,0,1185,1186,
        3,312,156,0,1186,1187,3,224,112,0,1187,1188,3,248,124,0,1188,247,
        1,0,0,0,1189,1190,3,312,156,0,1190,1201,3,104,52,0,1191,1202,3,250,
        125,0,1192,1193,5,13,0,0,1193,1194,3,312,156,0,1194,1195,3,104,52,
        0,1195,1197,1,0,0,0,1196,1192,1,0,0,0,1197,1200,1,0,0,0,1198,1196,
        1,0,0,0,1198,1199,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1201,
        1191,1,0,0,0,1201,1198,1,0,0,0,1202,249,1,0,0,0,1203,1205,3,252,
        126,0,1204,1206,3,254,127,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,
        1206,1209,1,0,0,0,1207,1209,3,254,127,0,1208,1203,1,0,0,0,1208,1207,
        1,0,0,0,1209,251,1,0,0,0,1210,1211,5,69,0,0,1211,1212,3,256,128,
        0,1212,253,1,0,0,0,1213,1214,5,36,0,0,1214,1215,3,256,128,0,1215,
        255,1,0,0,0,1216,1217,5,16,0,0,1217,1222,3,22,11,0,1218,1219,5,13,
        0,0,1219,1221,3,22,11,0,1220,1218,1,0,0,0,1221,1224,1,0,0,0,1222,
        1220,1,0,0,0,1222,1223,1,0,0,0,1223,1225,1,0,0,0,1224,1222,1,0,0,
        0,1225,1226,5,17,0,0,1226,257,1,0,0,0,1227,1230,3,262,131,0,1228,
        1230,3,260,130,0,1229,1227,1,0,0,0,1229,1228,1,0,0,0,1230,259,1,
        0,0,0,1231,1232,5,98,0,0,1232,1233,5,113,0,0,1233,261,1,0,0,0,1234,
        1235,3,264,132,0,1235,1236,5,14,0,0,1236,1237,3,270,135,0,1237,1238,
        5,15,0,0,1238,263,1,0,0,0,1239,1240,5,98,0,0,1240,1242,3,320,160,
        0,1241,1243,3,268,134,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,
        1245,1,0,0,0,1244,1246,3,266,133,0,1245,1244,1,0,0,0,1245,1246,1,
        0,0,0,1246,265,1,0,0,0,1247,1248,5,73,0,0,1248,1253,3,22,11,0,1249,
        1250,5,13,0,0,1250,1252,3,22,11,0,1251,1249,1,0,0,0,1252,1255,1,
        0,0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,267,1,0,0,0,1255,
        1253,1,0,0,0,1256,1257,5,12,0,0,1257,1258,3,22,11,0,1258,269,1,0,
        0,0,1259,1261,3,272,136,0,1260,1259,1,0,0,0,1261,1264,1,0,0,0,1262,
        1260,1,0,0,0,1262,1263,1,0,0,0,1263,271,1,0,0,0,1264,1262,1,0,0,
        0,1265,1284,3,312,156,0,1266,1267,3,274,137,0,1267,1268,5,11,0,0,
        1268,1285,1,0,0,0,1269,1270,3,278,139,0,1270,1271,5,11,0,0,1271,
        1285,1,0,0,0,1272,1273,3,280,140,0,1273,1274,5,11,0,0,1274,1285,
        1,0,0,0,1275,1276,3,282,141,0,1276,1277,5,11,0,0,1277,1285,1,0,0,
        0,1278,1279,3,284,142,0,1279,1280,5,11,0,0,1280,1285,1,0,0,0,1281,
        1282,3,204,102,0,1282,1283,5,11,0,0,1283,1285,1,0,0,0,1284,1266,
        1,0,0,0,1284,1269,1,0,0,0,1284,1272,1,0,0,0,1284,1275,1,0,0,0,1284,
        1278,1,0,0,0,1284,1281,1,0,0,0,1285,273,1,0,0,0,1286,1287,5,89,0,
        0,1287,1288,3,276,138,0,1288,1289,5,113,0,0,1289,275,1,0,0,0,1290,
        1293,3,312,156,0,1291,1294,3,24,12,0,1292,1294,5,75,0,0,1293,1291,
        1,0,0,0,1293,1292,1,0,0,0,1294,277,1,0,0,0,1295,1297,5,43,0,0,1296,
        1298,5,86,0,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,
        0,0,1299,1300,3,276,138,0,1300,1301,5,113,0,0,1301,279,1,0,0,0,1302,
        1303,5,38,0,0,1303,1304,3,22,11,0,1304,1305,5,113,0,0,1305,281,1,
        0,0,0,1306,1307,5,41,0,0,1307,1308,3,22,11,0,1308,1309,5,113,0,0,
        1309,283,1,0,0,0,1310,1311,5,90,0,0,1311,1312,3,22,11,0,1312,1313,
        5,113,0,0,1313,285,1,0,0,0,1314,1315,3,288,144,0,1315,1316,3,294,
        147,0,1316,287,1,0,0,0,1317,1318,5,66,0,0,1318,1320,3,320,160,0,
        1319,1321,3,290,145,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,1323,
        1,0,0,0,1322,1324,3,266,133,0,1323,1322,1,0,0,0,1323,1324,1,0,0,
        0,1324,1325,1,0,0,0,1325,1326,5,96,0,0,1326,1328,3,22,11,0,1327,
        1329,3,292,146,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,289,1,
        0,0,0,1330,1331,5,12,0,0,1331,1332,3,22,11,0,1332,291,1,0,0,0,1333,
        1334,5,44,0,0,1334,1335,3,22,11,0,1335,293,1,0,0,0,1336,1340,5,14,
        0,0,1337,1339,3,296,148,0,1338,1337,1,0,0,0,1339,1342,1,0,0,0,1340,
        1338,1,0,0,0,1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1340,1,0,0,
        0,1343,1344,5,15,0,0,1344,295,1,0,0,0,1345,1354,3,16,8,0,1346,1349,
        3,312,156,0,1347,1350,3,298,149,0,1348,1350,3,300,150,0,1349,1347,
        1,0,0,0,1349,1348,1,0,0,0,1350,1351,1,0,0,0,1351,1352,5,11,0,0,1352,
        1354,1,0,0,0,1353,1345,1,0,0,0,1353,1346,1,0,0,0,1354,297,1,0,0,
        0,1355,1356,5,67,0,0,1356,1357,3,320,160,0,1357,1359,5,16,0,0,1358,
        1360,3,48,24,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,
        0,0,1361,1363,5,17,0,0,1362,1364,3,220,110,0,1363,1362,1,0,0,0,1363,
        1364,1,0,0,0,1364,299,1,0,0,0,1365,1366,5,52,0,0,1366,1367,3,320,
        160,0,1367,1369,5,16,0,0,1368,1370,3,48,24,0,1369,1368,1,0,0,0,1369,
        1370,1,0,0,0,1370,1371,1,0,0,0,1371,1373,5,17,0,0,1372,1374,3,220,
        110,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,301,1,0,0,0,1375,
        1379,3,308,154,0,1376,1379,3,306,153,0,1377,1379,3,304,152,0,1378,
        1375,1,0,0,0,1378,1376,1,0,0,0,1378,1377,1,0,0,0,1379,303,1,0,0,
        0,1380,1382,5,87,0,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,1383,
        1,0,0,0,1383,1384,5,56,0,0,1384,1385,5,113,0,0,1385,305,1,0,0,0,
        1386,1387,5,87,0,0,1387,1388,5,56,0,0,1388,1389,3,320,160,0,1389,
        1390,3,38,19,0,1390,1394,5,14,0,0,1391,1393,3,16,8,0,1392,1391,1,
        0,0,0,1393,1396,1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,
        1397,1,0,0,0,1396,1394,1,0,0,0,1397,1398,5,15,0,0,1398,307,1,0,0,
        0,1399,1400,3,310,155,0,1400,1404,5,14,0,0,1401,1403,3,42,21,0,1402,
        1401,1,0,0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1404,1405,1,0,0,
        0,1405,1407,1,0,0,0,1406,1404,1,0,0,0,1407,1408,5,15,0,0,1408,309,
        1,0,0,0,1409,1411,5,45,0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,
        1412,1,0,0,0,1412,1413,5,56,0,0,1413,1414,3,320,160,0,1414,1415,
        3,38,19,0,1415,311,1,0,0,0,1416,1418,3,314,157,0,1417,1416,1,0,0,
        0,1418,1421,1,0,0,0,1419,1417,1,0,0,0,1419,1420,1,0,0,0,1420,313,
        1,0,0,0,1421,1419,1,0,0,0,1422,1423,5,35,0,0,1423,1428,3,24,12,0,
        1424,1425,5,16,0,0,1425,1426,3,316,158,0,1426,1427,5,17,0,0,1427,
        1429,1,0,0,0,1428,1424,1,0,0,0,1428,1429,1,0,0,0,1429,315,1,0,0,
        0,1430,1440,3,58,29,0,1431,1436,3,318,159,0,1432,1433,5,13,0,0,1433,
        1435,3,318,159,0,1434,1432,1,0,0,0,1435,1438,1,0,0,0,1436,1434,1,
        0,0,0,1436,1437,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1439,
        1430,1,0,0,0,1439,1431,1,0,0,0,1440,317,1,0,0,0,1441,1442,5,113,
        0,0,1442,1443,5,30,0,0,1443,1444,3,58,29,0,1444,319,1,0,0,0,1445,
        1446,3,312,156,0,1446,1447,5,113,0,0,1447,321,1,0,0,0,125,325,331,
        372,380,387,395,401,406,411,436,444,453,460,468,471,488,498,504,
        512,519,522,530,533,540,547,558,562,571,600,609,617,625,633,641,
        649,656,666,686,693,698,703,714,722,729,736,744,750,760,764,770,
        781,787,794,799,805,821,831,847,849,856,867,875,881,889,904,911,
        920,946,951,956,968,982,995,1004,1015,1024,1031,1037,1045,1053,1059,
        1065,1068,1075,1083,1086,1106,1118,1127,1144,1154,1179,1182,1198,
        1201,1205,1208,1222,1229,1242,1245,1253,1262,1284,1293,1297,1320,
        1323,1328,1340,1349,1353,1359,1363,1369,1373,1378,1381,1394,1404,
        1410,1419,1428,1436,1439
    ]

class IDLParser ( Parser ):

    grammarFileName = "IDL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'{'", "'}'", "'('", "')'", "'['", "']'", "'~'", 
                     "'/'", "'<'", "'>'", "'*'", "'+'", "'-'", "'^'", "'&'", 
                     "'|'", "'='", "'%'", "'::'", "'>>'", "'<<'", "'@'", 
                     "'setraises'", "'out'", "'emits'", "'string'", "'switch'", 
                     "'publishes'", "'typedef'", "'uses'", "'primarykey'", 
                     "'custom'", "'octet'", "'sequence'", "'import'", "'struct'", 
                     "'native'", "'readonly'", "'finder'", "'raises'", "'void'", 
                     "'private'", "'eventtype'", "'wchar'", "'in'", "'default'", 
                     "'public'", "'short'", "'long'", "'enum'", "'wstring'", 
                     "'context'", "'home'", "'factory'", "'exception'", 
                     "'getraises'", "'const'", "'ValueBase'", "'valuetype'", 
                     "'supports'", "'module'", "'Object'", "'truncatable'", 
                     "'unsigned'", "'fixed'", "'union'", "'oneway'", "'any'", 
                     "'char'", "'case'", "'float'", "'boolean'", "'multiple'", 
                     "'abstract'", "'inout'", "'provides'", "'consumes'", 
                     "'double'", "'typeprefix'", "'typeid'", "'attribute'", 
                     "'local'", "'manages'", "'interface'", "'component'", 
                     "'set'", "'map'", "'bitfield'", "'bitset'", "'bitmask'", 
                     "'int8'", "'uint8'", "'int16'", "'uint16'", "'int32'", 
                     "'uint32'", "'int64'", "'uint64'", "'@annotation'" ]

    symbolicNames = [ "<INVALID>", "INTEGER_LITERAL", "OCTAL_LITERAL", "HEX_LITERAL", 
                      "FLOATING_PT_LITERAL", "FIXED_PT_LITERAL", "WIDE_CHARACTER_LITERAL", 
                      "CHARACTER_LITERAL", "WIDE_STRING_LITERAL", "STRING_LITERAL", 
                      "BOOLEAN_LITERAL", "SEMICOLON", "COLON", "COMMA", 
                      "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", 
                      "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "TILDE", 
                      "SLASH", "LEFT_ANG_BRACKET", "RIGHT_ANG_BRACKET", 
                      "STAR", "PLUS", "MINUS", "CARET", "AMPERSAND", "PIPE", 
                      "EQUAL", "PERCENT", "DOUBLE_COLON", "RIGHT_SHIFT", 
                      "LEFT_SHIFT", "AT", "KW_SETRAISES", "KW_OUT", "KW_EMITS", 
                      "KW_STRING", "KW_SWITCH", "KW_PUBLISHES", "KW_TYPEDEF", 
                      "KW_USES", "KW_PRIMARYKEY", "KW_CUSTOM", "KW_OCTET", 
                      "KW_SEQUENCE", "KW_IMPORT", "KW_STRUCT", "KW_NATIVE", 
                      "KW_READONLY", "KW_FINDER", "KW_RAISES", "KW_VOID", 
                      "KW_PRIVATE", "KW_EVENTTYPE", "KW_WCHAR", "KW_IN", 
                      "KW_DEFAULT", "KW_PUBLIC", "KW_SHORT", "KW_LONG", 
                      "KW_ENUM", "KW_WSTRING", "KW_CONTEXT", "KW_HOME", 
                      "KW_FACTORY", "KW_EXCEPTION", "KW_GETRAISES", "KW_CONST", 
                      "KW_VALUEBASE", "KW_VALUETYPE", "KW_SUPPORTS", "KW_MODULE", 
                      "KW_OBJECT", "KW_TRUNCATABLE", "KW_UNSIGNED", "KW_FIXED", 
                      "KW_UNION", "KW_ONEWAY", "KW_ANY", "KW_CHAR", "KW_CASE", 
                      "KW_FLOAT", "KW_BOOLEAN", "KW_MULTIPLE", "KW_ABSTRACT", 
                      "KW_INOUT", "KW_PROVIDES", "KW_CONSUMES", "KW_DOUBLE", 
                      "KW_TYPEPREFIX", "KW_TYPEID", "KW_ATTRIBUTE", "KW_LOCAL", 
                      "KW_MANAGES", "KW_INTERFACE", "KW_COMPONENT", "KW_SET", 
                      "KW_MAP", "KW_BITFIELD", "KW_BITSET", "KW_BITMASK", 
                      "KW_INT8", "KW_UINT8", "KW_INT16", "KW_UINT16", "KW_INT32", 
                      "KW_UINT32", "KW_INT64", "KW_UINT64", "KW_AT_ANNOTATION", 
                      "ID", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_specification = 0
    RULE_definition = 1
    RULE_module = 2
    RULE_interface_or_forward_decl = 3
    RULE_interface_decl = 4
    RULE_forward_decl = 5
    RULE_interface_header = 6
    RULE_interface_body = 7
    RULE_export_ = 8
    RULE_interface_inheritance_spec = 9
    RULE_interface_name = 10
    RULE_a_scoped_name = 11
    RULE_scoped_name = 12
    RULE_value = 13
    RULE_value_forward_decl = 14
    RULE_value_box_decl = 15
    RULE_value_abs_decl = 16
    RULE_value_decl = 17
    RULE_value_header = 18
    RULE_value_inheritance_spec = 19
    RULE_value_name = 20
    RULE_value_element = 21
    RULE_state_member = 22
    RULE_init_decl = 23
    RULE_init_param_decls = 24
    RULE_init_param_decl = 25
    RULE_init_param_attribute = 26
    RULE_const_decl = 27
    RULE_const_type = 28
    RULE_const_exp = 29
    RULE_or_expr = 30
    RULE_xor_expr = 31
    RULE_and_expr = 32
    RULE_shift_expr = 33
    RULE_add_expr = 34
    RULE_mult_expr = 35
    RULE_unary_expr = 36
    RULE_unary_operator = 37
    RULE_primary_expr = 38
    RULE_literal = 39
    RULE_positive_int_const = 40
    RULE_type_decl = 41
    RULE_type_declarator = 42
    RULE_type_spec = 43
    RULE_simple_type_spec = 44
    RULE_bitfield_type_spec = 45
    RULE_base_type_spec = 46
    RULE_template_type_spec = 47
    RULE_constr_type_spec = 48
    RULE_simple_declarators = 49
    RULE_declarators = 50
    RULE_declarator = 51
    RULE_simple_declarator = 52
    RULE_complex_declarator = 53
    RULE_floating_pt_type = 54
    RULE_integer_type = 55
    RULE_signed_int = 56
    RULE_signed_tiny_int = 57
    RULE_signed_short_int = 58
    RULE_signed_long_int = 59
    RULE_signed_longlong_int = 60
    RULE_unsigned_int = 61
    RULE_unsigned_tiny_int = 62
    RULE_unsigned_short_int = 63
    RULE_unsigned_long_int = 64
    RULE_unsigned_longlong_int = 65
    RULE_char_type = 66
    RULE_wide_char_type = 67
    RULE_boolean_type = 68
    RULE_octet_type = 69
    RULE_any_type = 70
    RULE_object_type = 71
    RULE_annotation_decl = 72
    RULE_annotation_def = 73
    RULE_annotation_header = 74
    RULE_annotation_inheritance_spec = 75
    RULE_annotation_body = 76
    RULE_annotation_member = 77
    RULE_annotation_forward_dcl = 78
    RULE_bitset_type = 79
    RULE_bitfield = 80
    RULE_bitfield_spec = 81
    RULE_bitmask_type = 82
    RULE_bit_values = 83
    RULE_struct_type = 84
    RULE_member_list = 85
    RULE_member = 86
    RULE_union_type = 87
    RULE_switch_type_spec = 88
    RULE_switch_body = 89
    RULE_case_stmt = 90
    RULE_case_label = 91
    RULE_element_spec = 92
    RULE_enum_type = 93
    RULE_enumerator = 94
    RULE_sequence_type = 95
    RULE_set_type = 96
    RULE_map_type = 97
    RULE_string_type = 98
    RULE_wide_string_type = 99
    RULE_array_declarator = 100
    RULE_fixed_array_size = 101
    RULE_attr_decl = 102
    RULE_except_decl = 103
    RULE_op_decl = 104
    RULE_op_attribute = 105
    RULE_op_type_spec = 106
    RULE_parameter_decls = 107
    RULE_param_decl = 108
    RULE_param_attribute = 109
    RULE_raises_expr = 110
    RULE_context_expr = 111
    RULE_param_type_spec = 112
    RULE_fixed_pt_type = 113
    RULE_fixed_pt_const_type = 114
    RULE_value_base_type = 115
    RULE_constr_forward_decl = 116
    RULE_import_decl = 117
    RULE_imported_scope = 118
    RULE_type_id_decl = 119
    RULE_type_prefix_decl = 120
    RULE_readonly_attr_spec = 121
    RULE_readonly_attr_declarator = 122
    RULE_attr_spec = 123
    RULE_attr_declarator = 124
    RULE_attr_raises_expr = 125
    RULE_get_excep_expr = 126
    RULE_set_excep_expr = 127
    RULE_exception_list = 128
    RULE_component = 129
    RULE_component_forward_decl = 130
    RULE_component_decl = 131
    RULE_component_header = 132
    RULE_supported_interface_spec = 133
    RULE_component_inheritance_spec = 134
    RULE_component_body = 135
    RULE_component_export = 136
    RULE_provides_decl = 137
    RULE_interface_type = 138
    RULE_uses_decl = 139
    RULE_emits_decl = 140
    RULE_publishes_decl = 141
    RULE_consumes_decl = 142
    RULE_home_decl = 143
    RULE_home_header = 144
    RULE_home_inheritance_spec = 145
    RULE_primary_key_spec = 146
    RULE_home_body = 147
    RULE_home_export = 148
    RULE_factory_decl = 149
    RULE_finder_decl = 150
    RULE_event = 151
    RULE_event_forward_decl = 152
    RULE_event_abs_decl = 153
    RULE_event_decl = 154
    RULE_event_header = 155
    RULE_annapps = 156
    RULE_annotation_appl = 157
    RULE_annotation_appl_params = 158
    RULE_annotation_appl_param = 159
    RULE_identifier = 160

    ruleNames =  [ "specification", "definition", "module", "interface_or_forward_decl", 
                   "interface_decl", "forward_decl", "interface_header", 
                   "interface_body", "export_", "interface_inheritance_spec", 
                   "interface_name", "a_scoped_name", "scoped_name", "value", 
                   "value_forward_decl", "value_box_decl", "value_abs_decl", 
                   "value_decl", "value_header", "value_inheritance_spec", 
                   "value_name", "value_element", "state_member", "init_decl", 
                   "init_param_decls", "init_param_decl", "init_param_attribute", 
                   "const_decl", "const_type", "const_exp", "or_expr", "xor_expr", 
                   "and_expr", "shift_expr", "add_expr", "mult_expr", "unary_expr", 
                   "unary_operator", "primary_expr", "literal", "positive_int_const", 
                   "type_decl", "type_declarator", "type_spec", "simple_type_spec", 
                   "bitfield_type_spec", "base_type_spec", "template_type_spec", 
                   "constr_type_spec", "simple_declarators", "declarators", 
                   "declarator", "simple_declarator", "complex_declarator", 
                   "floating_pt_type", "integer_type", "signed_int", "signed_tiny_int", 
                   "signed_short_int", "signed_long_int", "signed_longlong_int", 
                   "unsigned_int", "unsigned_tiny_int", "unsigned_short_int", 
                   "unsigned_long_int", "unsigned_longlong_int", "char_type", 
                   "wide_char_type", "boolean_type", "octet_type", "any_type", 
                   "object_type", "annotation_decl", "annotation_def", "annotation_header", 
                   "annotation_inheritance_spec", "annotation_body", "annotation_member", 
                   "annotation_forward_dcl", "bitset_type", "bitfield", 
                   "bitfield_spec", "bitmask_type", "bit_values", "struct_type", 
                   "member_list", "member", "union_type", "switch_type_spec", 
                   "switch_body", "case_stmt", "case_label", "element_spec", 
                   "enum_type", "enumerator", "sequence_type", "set_type", 
                   "map_type", "string_type", "wide_string_type", "array_declarator", 
                   "fixed_array_size", "attr_decl", "except_decl", "op_decl", 
                   "op_attribute", "op_type_spec", "parameter_decls", "param_decl", 
                   "param_attribute", "raises_expr", "context_expr", "param_type_spec", 
                   "fixed_pt_type", "fixed_pt_const_type", "value_base_type", 
                   "constr_forward_decl", "import_decl", "imported_scope", 
                   "type_id_decl", "type_prefix_decl", "readonly_attr_spec", 
                   "readonly_attr_declarator", "attr_spec", "attr_declarator", 
                   "attr_raises_expr", "get_excep_expr", "set_excep_expr", 
                   "exception_list", "component", "component_forward_decl", 
                   "component_decl", "component_header", "supported_interface_spec", 
                   "component_inheritance_spec", "component_body", "component_export", 
                   "provides_decl", "interface_type", "uses_decl", "emits_decl", 
                   "publishes_decl", "consumes_decl", "home_decl", "home_header", 
                   "home_inheritance_spec", "primary_key_spec", "home_body", 
                   "home_export", "factory_decl", "finder_decl", "event", 
                   "event_forward_decl", "event_abs_decl", "event_decl", 
                   "event_header", "annapps", "annotation_appl", "annotation_appl_params", 
                   "annotation_appl_param", "identifier" ]

    EOF = Token.EOF
    INTEGER_LITERAL=1
    OCTAL_LITERAL=2
    HEX_LITERAL=3
    FLOATING_PT_LITERAL=4
    FIXED_PT_LITERAL=5
    WIDE_CHARACTER_LITERAL=6
    CHARACTER_LITERAL=7
    WIDE_STRING_LITERAL=8
    STRING_LITERAL=9
    BOOLEAN_LITERAL=10
    SEMICOLON=11
    COLON=12
    COMMA=13
    LEFT_BRACE=14
    RIGHT_BRACE=15
    LEFT_BRACKET=16
    RIGHT_BRACKET=17
    LEFT_SQUARE_BRACKET=18
    RIGHT_SQUARE_BRACKET=19
    TILDE=20
    SLASH=21
    LEFT_ANG_BRACKET=22
    RIGHT_ANG_BRACKET=23
    STAR=24
    PLUS=25
    MINUS=26
    CARET=27
    AMPERSAND=28
    PIPE=29
    EQUAL=30
    PERCENT=31
    DOUBLE_COLON=32
    RIGHT_SHIFT=33
    LEFT_SHIFT=34
    AT=35
    KW_SETRAISES=36
    KW_OUT=37
    KW_EMITS=38
    KW_STRING=39
    KW_SWITCH=40
    KW_PUBLISHES=41
    KW_TYPEDEF=42
    KW_USES=43
    KW_PRIMARYKEY=44
    KW_CUSTOM=45
    KW_OCTET=46
    KW_SEQUENCE=47
    KW_IMPORT=48
    KW_STRUCT=49
    KW_NATIVE=50
    KW_READONLY=51
    KW_FINDER=52
    KW_RAISES=53
    KW_VOID=54
    KW_PRIVATE=55
    KW_EVENTTYPE=56
    KW_WCHAR=57
    KW_IN=58
    KW_DEFAULT=59
    KW_PUBLIC=60
    KW_SHORT=61
    KW_LONG=62
    KW_ENUM=63
    KW_WSTRING=64
    KW_CONTEXT=65
    KW_HOME=66
    KW_FACTORY=67
    KW_EXCEPTION=68
    KW_GETRAISES=69
    KW_CONST=70
    KW_VALUEBASE=71
    KW_VALUETYPE=72
    KW_SUPPORTS=73
    KW_MODULE=74
    KW_OBJECT=75
    KW_TRUNCATABLE=76
    KW_UNSIGNED=77
    KW_FIXED=78
    KW_UNION=79
    KW_ONEWAY=80
    KW_ANY=81
    KW_CHAR=82
    KW_CASE=83
    KW_FLOAT=84
    KW_BOOLEAN=85
    KW_MULTIPLE=86
    KW_ABSTRACT=87
    KW_INOUT=88
    KW_PROVIDES=89
    KW_CONSUMES=90
    KW_DOUBLE=91
    KW_TYPEPREFIX=92
    KW_TYPEID=93
    KW_ATTRIBUTE=94
    KW_LOCAL=95
    KW_MANAGES=96
    KW_INTERFACE=97
    KW_COMPONENT=98
    KW_SET=99
    KW_MAP=100
    KW_BITFIELD=101
    KW_BITSET=102
    KW_BITMASK=103
    KW_INT8=104
    KW_UINT8=105
    KW_INT16=106
    KW_UINT16=107
    KW_INT32=108
    KW_UINT32=109
    KW_INT64=110
    KW_UINT64=111
    KW_AT_ANNOTATION=112
    ID=113
    WS=114
    COMMENT=115
    LINE_COMMENT=116

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(IDLParser.EOF, 0)

        def import_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Import_declContext)
            else:
                return self.getTypedRuleContext(IDLParser.Import_declContext,i)


        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(IDLParser.DefinitionContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecification" ):
                listener.enterSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecification" ):
                listener.exitSpecification(self)




    def specification(self):

        localctx = IDLParser.SpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 322
                    self.import_decl() 
                self.state = 327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 329 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 328
                self.definition()
                self.state = 331 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9149585976178245632) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 70582085362005) != 0)):
                    break

            self.state = 333
            self.match(IDLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def type_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_declContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def const_decl(self):
            return self.getTypedRuleContext(IDLParser.Const_declContext,0)


        def except_decl(self):
            return self.getTypedRuleContext(IDLParser.Except_declContext,0)


        def interface_or_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Interface_or_forward_declContext,0)


        def module(self):
            return self.getTypedRuleContext(IDLParser.ModuleContext,0)


        def value(self):
            return self.getTypedRuleContext(IDLParser.ValueContext,0)


        def type_id_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_id_declContext,0)


        def type_prefix_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_prefix_declContext,0)


        def event(self):
            return self.getTypedRuleContext(IDLParser.EventContext,0)


        def component(self):
            return self.getTypedRuleContext(IDLParser.ComponentContext,0)


        def home_decl(self):
            return self.getTypedRuleContext(IDLParser.Home_declContext,0)


        def annotation_decl(self):
            return self.getTypedRuleContext(IDLParser.Annotation_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition" ):
                listener.enterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition" ):
                listener.exitDefinition(self)




    def definition(self):

        localctx = IDLParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.annapps()
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 336
                self.type_decl()
                self.state = 337
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 339
                self.const_decl()
                self.state = 340
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 342
                self.except_decl()
                self.state = 343
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.state = 345
                self.interface_or_forward_decl()
                self.state = 346
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 5:
                self.state = 348
                self.module()
                self.state = 349
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 6:
                self.state = 351
                self.value()
                self.state = 352
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 7:
                self.state = 354
                self.type_id_decl()
                self.state = 355
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.state = 357
                self.type_prefix_decl()
                self.state = 358
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 9:
                self.state = 360
                self.event()
                self.state = 361
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 10:
                self.state = 363
                self.component()
                self.state = 364
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.state = 366
                self.home_decl()
                self.state = 367
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 12:
                self.state = 369
                self.annotation_decl()
                self.state = 370
                self.match(IDLParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MODULE(self):
            return self.getToken(IDLParser.KW_MODULE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(IDLParser.DefinitionContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = IDLParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(IDLParser.KW_MODULE)
            self.state = 375
            self.identifier()
            self.state = 376
            self.match(IDLParser.LEFT_BRACE)
            self.state = 378 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 377
                self.definition()
                self.state = 380 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9149585976178245632) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 70582085362005) != 0)):
                    break

            self.state = 382
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_or_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def interface_decl(self):
            return self.getTypedRuleContext(IDLParser.Interface_declContext,0)


        def forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_interface_or_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_or_forward_decl" ):
                listener.enterInterface_or_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_or_forward_decl" ):
                listener.exitInterface_or_forward_decl(self)




    def interface_or_forward_decl(self):

        localctx = IDLParser.Interface_or_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_interface_or_forward_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.annapps()
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 385
                self.interface_decl()
                pass

            elif la_ == 2:
                self.state = 386
                self.forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_header(self):
            return self.getTypedRuleContext(IDLParser.Interface_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def interface_body(self):
            return self.getTypedRuleContext(IDLParser.Interface_bodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_decl" ):
                listener.enterInterface_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_decl" ):
                listener.exitInterface_decl(self)




    def interface_decl(self):

        localctx = IDLParser.Interface_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interface_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.interface_header()
            self.state = 390
            self.match(IDLParser.LEFT_BRACE)
            self.state = 391
            self.interface_body()
            self.state = 392
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INTERFACE(self):
            return self.getToken(IDLParser.KW_INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_LOCAL(self):
            return self.getToken(IDLParser.KW_LOCAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForward_decl" ):
                listener.enterForward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForward_decl" ):
                listener.exitForward_decl(self)




    def forward_decl(self):

        localctx = IDLParser.Forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_forward_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87 or _la==95:
                self.state = 394
                _la = self._input.LA(1)
                if not(_la==87 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 397
            self.match(IDLParser.KW_INTERFACE)
            self.state = 398
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INTERFACE(self):
            return self.getToken(IDLParser.KW_INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def interface_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Interface_inheritance_specContext,0)


        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_LOCAL(self):
            return self.getToken(IDLParser.KW_LOCAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_header" ):
                listener.enterInterface_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_header" ):
                listener.exitInterface_header(self)




    def interface_header(self):

        localctx = IDLParser.Interface_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_interface_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87 or _la==95:
                self.state = 400
                _la = self._input.LA(1)
                if not(_la==87 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 403
            self.match(IDLParser.KW_INTERFACE)
            self.state = 404
            self.identifier()
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 405
                self.interface_inheritance_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def export_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Export_Context)
            else:
                return self.getTypedRuleContext(IDLParser.Export_Context,i)


        def getRuleIndex(self):
            return IDLParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = IDLParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2139697417753198592) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844152069138641) != 0):
                self.state = 408
                self.export_()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Export_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def type_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_declContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def const_decl(self):
            return self.getTypedRuleContext(IDLParser.Const_declContext,0)


        def except_decl(self):
            return self.getTypedRuleContext(IDLParser.Except_declContext,0)


        def attr_decl(self):
            return self.getTypedRuleContext(IDLParser.Attr_declContext,0)


        def op_decl(self):
            return self.getTypedRuleContext(IDLParser.Op_declContext,0)


        def type_id_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_id_declContext,0)


        def type_prefix_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_prefix_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_export_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExport_" ):
                listener.enterExport_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExport_" ):
                listener.exitExport_(self)




    def export_(self):

        localctx = IDLParser.Export_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_export_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.annapps()
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 49, 50, 63, 79, 102, 103]:
                self.state = 415
                self.type_decl()
                self.state = 416
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [70]:
                self.state = 418
                self.const_decl()
                self.state = 419
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [68]:
                self.state = 421
                self.except_decl()
                self.state = 422
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [51, 94]:
                self.state = 424
                self.attr_decl()
                self.state = 425
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [32, 35, 39, 46, 54, 57, 61, 62, 64, 71, 75, 77, 80, 81, 82, 84, 85, 91, 104, 105, 106, 107, 108, 109, 110, 111, 113]:
                self.state = 427
                self.op_decl()
                self.state = 428
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [93]:
                self.state = 430
                self.type_id_decl()
                self.state = 431
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [92]:
                self.state = 433
                self.type_prefix_decl()
                self.state = 434
                self.match(IDLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def interface_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Interface_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Interface_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_inheritance_spec" ):
                listener.enterInterface_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_inheritance_spec" ):
                listener.exitInterface_inheritance_spec(self)




    def interface_inheritance_spec(self):

        localctx = IDLParser.Interface_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_interface_inheritance_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(IDLParser.COLON)
            self.state = 439
            self.interface_name()
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 440
                self.match(IDLParser.COMMA)
                self.state = 441
                self.interface_name()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_interface_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_name" ):
                listener.enterInterface_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_name" ):
                listener.exitInterface_name(self)




    def interface_name(self):

        localctx = IDLParser.Interface_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interface_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.a_scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_scoped_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_a_scoped_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_scoped_name" ):
                listener.enterA_scoped_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_scoped_name" ):
                listener.exitA_scoped_name(self)




    def a_scoped_name(self):

        localctx = IDLParser.A_scoped_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_a_scoped_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.annapps()
            self.state = 450
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scoped_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.ID)
            else:
                return self.getToken(IDLParser.ID, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.DOUBLE_COLON)
            else:
                return self.getToken(IDLParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return IDLParser.RULE_scoped_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScoped_name" ):
                listener.enterScoped_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScoped_name" ):
                listener.exitScoped_name(self)




    def scoped_name(self):

        localctx = IDLParser.Scoped_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_scoped_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 452
                self.match(IDLParser.DOUBLE_COLON)


            self.state = 455
            self.match(IDLParser.ID)
            self.state = 460
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 456
                    self.match(IDLParser.DOUBLE_COLON)
                    self.state = 457
                    self.match(IDLParser.ID) 
                self.state = 462
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def value_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_declContext,0)


        def value_abs_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_abs_declContext,0)


        def value_box_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_box_declContext,0)


        def value_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = IDLParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.annapps()
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 464
                self.value_decl()
                pass

            elif la_ == 2:
                self.state = 465
                self.value_abs_decl()
                pass

            elif la_ == 3:
                self.state = 466
                self.value_box_decl()
                pass

            elif la_ == 4:
                self.state = 467
                self.value_forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_value_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_forward_decl" ):
                listener.enterValue_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_forward_decl" ):
                listener.exitValue_forward_decl(self)




    def value_forward_decl(self):

        localctx = IDLParser.Value_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_value_forward_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 470
                self.match(IDLParser.KW_ABSTRACT)


            self.state = 473
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 474
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_box_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value_box_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_box_decl" ):
                listener.enterValue_box_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_box_decl" ):
                listener.exitValue_box_decl(self)




    def value_box_decl(self):

        localctx = IDLParser.Value_box_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_value_box_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 477
            self.identifier()
            self.state = 478
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_abs_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def export_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Export_Context)
            else:
                return self.getTypedRuleContext(IDLParser.Export_Context,i)


        def getRuleIndex(self):
            return IDLParser.RULE_value_abs_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_abs_decl" ):
                listener.enterValue_abs_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_abs_decl" ):
                listener.exitValue_abs_decl(self)




    def value_abs_decl(self):

        localctx = IDLParser.Value_abs_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_value_abs_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(IDLParser.KW_ABSTRACT)
            self.state = 481
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 482
            self.identifier()
            self.state = 483
            self.value_inheritance_spec()
            self.state = 484
            self.match(IDLParser.LEFT_BRACE)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2139697417753198592) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844152069138641) != 0):
                self.state = 485
                self.export_()
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 491
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_header(self):
            return self.getTypedRuleContext(IDLParser.Value_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def value_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Value_elementContext)
            else:
                return self.getTypedRuleContext(IDLParser.Value_elementContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_value_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_decl" ):
                listener.enterValue_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_decl" ):
                listener.exitValue_decl(self)




    def value_decl(self):

        localctx = IDLParser.Value_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_value_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.value_header()
            self.state = 494
            self.match(IDLParser.LEFT_BRACE)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -950747116127387648) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844152069138649) != 0):
                self.state = 495
                self.value_element()
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 501
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def KW_CUSTOM(self):
            return self.getToken(IDLParser.KW_CUSTOM, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_value_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_header" ):
                listener.enterValue_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_header" ):
                listener.exitValue_header(self)




    def value_header(self):

        localctx = IDLParser.Value_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_value_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 503
                self.match(IDLParser.KW_CUSTOM)


            self.state = 506
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 507
            self.identifier()
            self.state = 508
            self.value_inheritance_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def value_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Value_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Value_nameContext,i)


        def KW_SUPPORTS(self):
            return self.getToken(IDLParser.KW_SUPPORTS, 0)

        def interface_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Interface_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Interface_nameContext,i)


        def KW_TRUNCATABLE(self):
            return self.getToken(IDLParser.KW_TRUNCATABLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_value_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_inheritance_spec" ):
                listener.enterValue_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_inheritance_spec" ):
                listener.exitValue_inheritance_spec(self)




    def value_inheritance_spec(self):

        localctx = IDLParser.Value_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_value_inheritance_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 510
                self.match(IDLParser.COLON)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 511
                    self.match(IDLParser.KW_TRUNCATABLE)


                self.state = 514
                self.value_name()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 515
                    self.match(IDLParser.COMMA)
                    self.state = 516
                    self.value_name()
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 524
                self.match(IDLParser.KW_SUPPORTS)
                self.state = 525
                self.interface_name()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 526
                    self.match(IDLParser.COMMA)
                    self.state = 527
                    self.interface_name()
                    self.state = 532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_name" ):
                listener.enterValue_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_name" ):
                listener.exitValue_name(self)




    def value_name(self):

        localctx = IDLParser.Value_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_value_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.a_scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def export_(self):
            return self.getTypedRuleContext(IDLParser.Export_Context,0)


        def state_member(self):
            return self.getTypedRuleContext(IDLParser.State_memberContext,0)


        def init_decl(self):
            return self.getTypedRuleContext(IDLParser.Init_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_element" ):
                listener.enterValue_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_element" ):
                listener.exitValue_element(self)




    def value_element(self):

        localctx = IDLParser.Value_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_value_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 537
                self.export_()
                pass

            elif la_ == 2:
                self.state = 538
                self.state_member()
                pass

            elif la_ == 3:
                self.state = 539
                self.init_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.AnnappsContext)
            else:
                return self.getTypedRuleContext(IDLParser.AnnappsContext,i)


        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarators(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def KW_PUBLIC(self):
            return self.getToken(IDLParser.KW_PUBLIC, 0)

        def KW_PRIVATE(self):
            return self.getToken(IDLParser.KW_PRIVATE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_state_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_member" ):
                listener.enterState_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_member" ):
                listener.exitState_member(self)




    def state_member(self):

        localctx = IDLParser.State_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_state_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.annapps()
            self.state = 547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.state = 543
                self.match(IDLParser.KW_PUBLIC)
                self.state = 544
                self.annapps()
                pass
            elif token in [55]:
                self.state = 545
                self.match(IDLParser.KW_PRIVATE)
                self.state = 546
                self.annapps()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 549
            self.type_spec()
            self.state = 550
            self.declarators()
            self.state = 551
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def KW_FACTORY(self):
            return self.getToken(IDLParser.KW_FACTORY, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def init_param_decls(self):
            return self.getTypedRuleContext(IDLParser.Init_param_declsContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_init_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_decl" ):
                listener.enterInit_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_decl" ):
                listener.exitInit_decl(self)




    def init_decl(self):

        localctx = IDLParser.Init_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_init_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.annapps()
            self.state = 554
            self.match(IDLParser.KW_FACTORY)
            self.state = 555
            self.identifier()
            self.state = 556
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==58:
                self.state = 557
                self.init_param_decls()


            self.state = 560
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 561
                self.raises_expr()


            self.state = 564
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_param_declsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def init_param_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Init_param_declContext)
            else:
                return self.getTypedRuleContext(IDLParser.Init_param_declContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_init_param_decls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_param_decls" ):
                listener.enterInit_param_decls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_param_decls" ):
                listener.exitInit_param_decls(self)




    def init_param_decls(self):

        localctx = IDLParser.Init_param_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_init_param_decls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.init_param_decl()
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 567
                self.match(IDLParser.COMMA)
                self.state = 568
                self.init_param_decl()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_param_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.AnnappsContext)
            else:
                return self.getTypedRuleContext(IDLParser.AnnappsContext,i)


        def init_param_attribute(self):
            return self.getTypedRuleContext(IDLParser.Init_param_attributeContext,0)


        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_init_param_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_param_decl" ):
                listener.enterInit_param_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_param_decl" ):
                listener.exitInit_param_decl(self)




    def init_param_decl(self):

        localctx = IDLParser.Init_param_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_init_param_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.annapps()
            self.state = 575
            self.init_param_attribute()
            self.state = 576
            self.annapps()
            self.state = 577
            self.param_type_spec()
            self.state = 578
            self.annapps()
            self.state = 579
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_param_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IN(self):
            return self.getToken(IDLParser.KW_IN, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_init_param_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_param_attribute" ):
                listener.enterInit_param_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_param_attribute" ):
                listener.exitInit_param_attribute(self)




    def init_param_attribute(self):

        localctx = IDLParser.Init_param_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_init_param_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(IDLParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONST(self):
            return self.getToken(IDLParser.KW_CONST, 0)

        def const_type(self):
            return self.getTypedRuleContext(IDLParser.Const_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(IDLParser.EQUAL, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_const_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_decl" ):
                listener.enterConst_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_decl" ):
                listener.exitConst_decl(self)




    def const_decl(self):

        localctx = IDLParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_const_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(IDLParser.KW_CONST)
            self.state = 584
            self.const_type()
            self.state = 585
            self.identifier()
            self.state = 586
            self.match(IDLParser.EQUAL)
            self.state = 587
            self.const_exp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def integer_type(self):
            return self.getTypedRuleContext(IDLParser.Integer_typeContext,0)


        def char_type(self):
            return self.getTypedRuleContext(IDLParser.Char_typeContext,0)


        def wide_char_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_char_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(IDLParser.Boolean_typeContext,0)


        def floating_pt_type(self):
            return self.getTypedRuleContext(IDLParser.Floating_pt_typeContext,0)


        def string_type(self):
            return self.getTypedRuleContext(IDLParser.String_typeContext,0)


        def wide_string_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_string_typeContext,0)


        def fixed_pt_const_type(self):
            return self.getTypedRuleContext(IDLParser.Fixed_pt_const_typeContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def octet_type(self):
            return self.getTypedRuleContext(IDLParser.Octet_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_const_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_type" ):
                listener.enterConst_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_type" ):
                listener.exitConst_type(self)




    def const_type(self):

        localctx = IDLParser.Const_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_const_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.annapps()
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 590
                self.integer_type()
                pass

            elif la_ == 2:
                self.state = 591
                self.char_type()
                pass

            elif la_ == 3:
                self.state = 592
                self.wide_char_type()
                pass

            elif la_ == 4:
                self.state = 593
                self.boolean_type()
                pass

            elif la_ == 5:
                self.state = 594
                self.floating_pt_type()
                pass

            elif la_ == 6:
                self.state = 595
                self.string_type()
                pass

            elif la_ == 7:
                self.state = 596
                self.wide_string_type()
                pass

            elif la_ == 8:
                self.state = 597
                self.fixed_pt_const_type()
                pass

            elif la_ == 9:
                self.state = 598
                self.scoped_name()
                pass

            elif la_ == 10:
                self.state = 599
                self.octet_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_expContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_expr(self):
            return self.getTypedRuleContext(IDLParser.Or_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_const_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_exp" ):
                listener.enterConst_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_exp" ):
                listener.exitConst_exp(self)




    def const_exp(self):

        localctx = IDLParser.Const_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_const_exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.or_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Xor_exprContext,i)


        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.PIPE)
            else:
                return self.getToken(IDLParser.PIPE, i)

        def getRuleIndex(self):
            return IDLParser.RULE_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expr" ):
                listener.enterOr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expr" ):
                listener.exitOr_expr(self)




    def or_expr(self):

        localctx = IDLParser.Or_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_or_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.xor_expr()
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29:
                self.state = 605
                self.match(IDLParser.PIPE)
                self.state = 606
                self.xor_expr()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.And_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.And_exprContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.CARET)
            else:
                return self.getToken(IDLParser.CARET, i)

        def getRuleIndex(self):
            return IDLParser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)




    def xor_expr(self):

        localctx = IDLParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.and_expr()
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 613
                self.match(IDLParser.CARET)
                self.state = 614
                self.and_expr()
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Shift_exprContext,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.AMPERSAND)
            else:
                return self.getToken(IDLParser.AMPERSAND, i)

        def getRuleIndex(self):
            return IDLParser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)




    def and_expr(self):

        localctx = IDLParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.shift_expr()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28:
                self.state = 621
                self.match(IDLParser.AMPERSAND)
                self.state = 622
                self.shift_expr()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Add_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Add_exprContext,i)


        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.RIGHT_SHIFT)
            else:
                return self.getToken(IDLParser.RIGHT_SHIFT, i)

        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.LEFT_SHIFT)
            else:
                return self.getToken(IDLParser.LEFT_SHIFT, i)

        def getRuleIndex(self):
            return IDLParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)




    def shift_expr(self):

        localctx = IDLParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.add_expr()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33 or _la==34:
                self.state = 629
                _la = self._input.LA(1)
                if not(_la==33 or _la==34):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 630
                self.add_expr()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mult_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Mult_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Mult_exprContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.PLUS)
            else:
                return self.getToken(IDLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.MINUS)
            else:
                return self.getToken(IDLParser.MINUS, i)

        def getRuleIndex(self):
            return IDLParser.RULE_add_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_expr" ):
                listener.enterAdd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_expr" ):
                listener.exitAdd_expr(self)




    def add_expr(self):

        localctx = IDLParser.Add_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_add_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.mult_expr()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==26:
                self.state = 637
                _la = self._input.LA(1)
                if not(_la==25 or _la==26):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 638
                self.mult_expr()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mult_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Unary_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Unary_exprContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.STAR)
            else:
                return self.getToken(IDLParser.STAR, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.SLASH)
            else:
                return self.getToken(IDLParser.SLASH, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.PERCENT)
            else:
                return self.getToken(IDLParser.PERCENT, i)

        def getRuleIndex(self):
            return IDLParser.RULE_mult_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMult_expr" ):
                listener.enterMult_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMult_expr" ):
                listener.exitMult_expr(self)




    def mult_expr(self):

        localctx = IDLParser.Mult_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_mult_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.unary_expr()
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2166358016) != 0):
                self.state = 645
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2166358016) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 646
                self.unary_expr()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_operator(self):
            return self.getTypedRuleContext(IDLParser.Unary_operatorContext,0)


        def primary_expr(self):
            return self.getTypedRuleContext(IDLParser.Primary_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_unary_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expr" ):
                listener.enterUnary_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expr" ):
                listener.exitUnary_expr(self)




    def unary_expr(self):

        localctx = IDLParser.Unary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unary_expr)
        try:
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 25, 26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.unary_operator()
                self.state = 653
                self.primary_expr()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 32, 113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.primary_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(IDLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(IDLParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(IDLParser.TILDE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = IDLParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 101711872) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(IDLParser.LiteralContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_primary_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expr" ):
                listener.enterPrimary_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expr" ):
                listener.exitPrimary_expr(self)




    def primary_expr(self):

        localctx = IDLParser.Primary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primary_expr)
        try:
            self.state = 666
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.scoped_name()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 661
                self.literal()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 3)
                self.state = 662
                self.match(IDLParser.LEFT_BRACKET)
                self.state = 663
                self.const_exp()
                self.state = 664
                self.match(IDLParser.RIGHT_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(IDLParser.HEX_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(IDLParser.INTEGER_LITERAL, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(IDLParser.OCTAL_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def WIDE_STRING_LITERAL(self):
            return self.getToken(IDLParser.WIDE_STRING_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(IDLParser.CHARACTER_LITERAL, 0)

        def WIDE_CHARACTER_LITERAL(self):
            return self.getToken(IDLParser.WIDE_CHARACTER_LITERAL, 0)

        def FIXED_PT_LITERAL(self):
            return self.getToken(IDLParser.FIXED_PT_LITERAL, 0)

        def FLOATING_PT_LITERAL(self):
            return self.getToken(IDLParser.FLOATING_PT_LITERAL, 0)

        def BOOLEAN_LITERAL(self):
            return self.getToken(IDLParser.BOOLEAN_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = IDLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2046) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positive_int_constContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_positive_int_const

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositive_int_const" ):
                listener.enterPositive_int_const(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositive_int_const" ):
                listener.exitPositive_int_const(self)




    def positive_int_const(self):

        localctx = IDLParser.Positive_int_constContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_positive_int_const)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.const_exp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPEDEF(self):
            return self.getToken(IDLParser.KW_TYPEDEF, 0)

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def type_declarator(self):
            return self.getTypedRuleContext(IDLParser.Type_declaratorContext,0)


        def struct_type(self):
            return self.getTypedRuleContext(IDLParser.Struct_typeContext,0)


        def union_type(self):
            return self.getTypedRuleContext(IDLParser.Union_typeContext,0)


        def enum_type(self):
            return self.getTypedRuleContext(IDLParser.Enum_typeContext,0)


        def bitset_type(self):
            return self.getTypedRuleContext(IDLParser.Bitset_typeContext,0)


        def bitmask_type(self):
            return self.getTypedRuleContext(IDLParser.Bitmask_typeContext,0)


        def KW_NATIVE(self):
            return self.getToken(IDLParser.KW_NATIVE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def constr_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Constr_forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_type_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_decl" ):
                listener.enterType_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_decl" ):
                listener.exitType_decl(self)




    def type_decl(self):

        localctx = IDLParser.Type_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_type_decl)
        try:
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.match(IDLParser.KW_TYPEDEF)
                self.state = 673
                self.annapps()
                self.state = 674
                self.type_declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.struct_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 677
                self.union_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 678
                self.enum_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 679
                self.bitset_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 680
                self.bitmask_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 681
                self.match(IDLParser.KW_NATIVE)
                self.state = 682
                self.annapps()
                self.state = 683
                self.simple_declarator()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 685
                self.constr_forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarators(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorsContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declarator" ):
                listener.enterType_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declarator" ):
                listener.exitType_declarator(self)




    def type_declarator(self):

        localctx = IDLParser.Type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_type_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.type_spec()
            self.state = 689
            self.declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Simple_type_specContext,0)


        def constr_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Constr_type_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)




    def type_spec(self):

        localctx = IDLParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_type_spec)
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 39, 46, 47, 57, 61, 62, 64, 71, 75, 77, 78, 81, 82, 84, 85, 91, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.simple_type_spec()
                pass
            elif token in [49, 63, 79, 102, 103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.constr_type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Base_type_specContext,0)


        def template_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Template_type_specContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_simple_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type_spec" ):
                listener.enterSimple_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type_spec" ):
                listener.exitSimple_type_spec(self)




    def simple_type_spec(self):

        localctx = IDLParser.Simple_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_simple_type_spec)
        try:
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 57, 61, 62, 71, 75, 77, 81, 82, 84, 85, 91, 104, 105, 106, 107, 108, 109, 110, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.base_type_spec()
                pass
            elif token in [39, 47, 64, 78, 99, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.template_type_spec()
                pass
            elif token in [32, 113]:
                self.enterOuterAlt(localctx, 3)
                self.state = 697
                self.scoped_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitfield_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_type(self):
            return self.getTypedRuleContext(IDLParser.Integer_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(IDLParser.Boolean_typeContext,0)


        def octet_type(self):
            return self.getTypedRuleContext(IDLParser.Octet_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_bitfield_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitfield_type_spec" ):
                listener.enterBitfield_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitfield_type_spec" ):
                listener.exitBitfield_type_spec(self)




    def bitfield_type_spec(self):

        localctx = IDLParser.Bitfield_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_bitfield_type_spec)
        try:
            self.state = 703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 62, 77, 104, 105, 106, 107, 108, 109, 110, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.integer_type()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.boolean_type()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 3)
                self.state = 702
                self.octet_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floating_pt_type(self):
            return self.getTypedRuleContext(IDLParser.Floating_pt_typeContext,0)


        def integer_type(self):
            return self.getTypedRuleContext(IDLParser.Integer_typeContext,0)


        def char_type(self):
            return self.getTypedRuleContext(IDLParser.Char_typeContext,0)


        def wide_char_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_char_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(IDLParser.Boolean_typeContext,0)


        def octet_type(self):
            return self.getTypedRuleContext(IDLParser.Octet_typeContext,0)


        def any_type(self):
            return self.getTypedRuleContext(IDLParser.Any_typeContext,0)


        def object_type(self):
            return self.getTypedRuleContext(IDLParser.Object_typeContext,0)


        def value_base_type(self):
            return self.getTypedRuleContext(IDLParser.Value_base_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_base_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type_spec" ):
                listener.enterBase_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type_spec" ):
                listener.exitBase_type_spec(self)




    def base_type_spec(self):

        localctx = IDLParser.Base_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_base_type_spec)
        try:
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.floating_pt_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.integer_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.char_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 708
                self.wide_char_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 709
                self.boolean_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 710
                self.octet_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 711
                self.any_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 712
                self.object_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 713
                self.value_base_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Template_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sequence_type(self):
            return self.getTypedRuleContext(IDLParser.Sequence_typeContext,0)


        def set_type(self):
            return self.getTypedRuleContext(IDLParser.Set_typeContext,0)


        def map_type(self):
            return self.getTypedRuleContext(IDLParser.Map_typeContext,0)


        def string_type(self):
            return self.getTypedRuleContext(IDLParser.String_typeContext,0)


        def wide_string_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_string_typeContext,0)


        def fixed_pt_type(self):
            return self.getTypedRuleContext(IDLParser.Fixed_pt_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_template_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplate_type_spec" ):
                listener.enterTemplate_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplate_type_spec" ):
                listener.exitTemplate_type_spec(self)




    def template_type_spec(self):

        localctx = IDLParser.Template_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_template_type_spec)
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.sequence_type()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.set_type()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 718
                self.map_type()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 719
                self.string_type()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 5)
                self.state = 720
                self.wide_string_type()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 6)
                self.state = 721
                self.fixed_pt_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constr_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_type(self):
            return self.getTypedRuleContext(IDLParser.Struct_typeContext,0)


        def union_type(self):
            return self.getTypedRuleContext(IDLParser.Union_typeContext,0)


        def enum_type(self):
            return self.getTypedRuleContext(IDLParser.Enum_typeContext,0)


        def bitset_type(self):
            return self.getTypedRuleContext(IDLParser.Bitset_typeContext,0)


        def bitmask_type(self):
            return self.getTypedRuleContext(IDLParser.Bitmask_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_constr_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstr_type_spec" ):
                listener.enterConstr_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstr_type_spec" ):
                listener.exitConstr_type_spec(self)




    def constr_type_spec(self):

        localctx = IDLParser.Constr_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_constr_type_spec)
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.struct_type()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.union_type()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 726
                self.enum_type()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 727
                self.bitset_type()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 5)
                self.state = 728
                self.bitmask_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_declaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(IDLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_simple_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_declarators" ):
                listener.enterSimple_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_declarators" ):
                listener.exitSimple_declarators(self)




    def simple_declarators(self):

        localctx = IDLParser.Simple_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_simple_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.identifier()
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 732
                self.match(IDLParser.COMMA)
                self.state = 733
                self.identifier()
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.DeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarators" ):
                listener.enterDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarators" ):
                listener.exitDeclarators(self)




    def declarators(self):

        localctx = IDLParser.DeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.declarator()
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 740
                self.match(IDLParser.COMMA)
                self.state = 741
                self.declarator()
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def complex_declarator(self):
            return self.getTypedRuleContext(IDLParser.Complex_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = IDLParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.annapps()
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 748
                self.simple_declarator()
                pass

            elif la_ == 2:
                self.state = 749
                self.complex_declarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_simple_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_declarator" ):
                listener.enterSimple_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_declarator" ):
                listener.exitSimple_declarator(self)




    def simple_declarator(self):

        localctx = IDLParser.Simple_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_simple_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_declarator(self):
            return self.getTypedRuleContext(IDLParser.Array_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_complex_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_declarator" ):
                listener.enterComplex_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_declarator" ):
                listener.exitComplex_declarator(self)




    def complex_declarator(self):

        localctx = IDLParser.Complex_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_complex_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.array_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_pt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FLOAT(self):
            return self.getToken(IDLParser.KW_FLOAT, 0)

        def KW_DOUBLE(self):
            return self.getToken(IDLParser.KW_DOUBLE, 0)

        def KW_LONG(self):
            return self.getToken(IDLParser.KW_LONG, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_floating_pt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_pt_type" ):
                listener.enterFloating_pt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_pt_type" ):
                listener.exitFloating_pt_type(self)




    def floating_pt_type(self):

        localctx = IDLParser.Floating_pt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_floating_pt_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.state = 756
                self.match(IDLParser.KW_FLOAT)
                pass
            elif token in [91]:
                self.state = 757
                self.match(IDLParser.KW_DOUBLE)
                pass
            elif token in [62]:
                self.state = 758
                self.match(IDLParser.KW_LONG)
                self.state = 759
                self.match(IDLParser.KW_DOUBLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_int(self):
            return self.getTypedRuleContext(IDLParser.Signed_intContext,0)


        def unsigned_int(self):
            return self.getTypedRuleContext(IDLParser.Unsigned_intContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_integer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_type" ):
                listener.enterInteger_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_type" ):
                listener.exitInteger_type(self)




    def integer_type(self):

        localctx = IDLParser.Integer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_integer_type)
        try:
            self.state = 764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 62, 104, 106, 108, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.signed_int()
                pass
            elif token in [77, 105, 107, 109, 111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.unsigned_int()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_short_int(self):
            return self.getTypedRuleContext(IDLParser.Signed_short_intContext,0)


        def signed_long_int(self):
            return self.getTypedRuleContext(IDLParser.Signed_long_intContext,0)


        def signed_longlong_int(self):
            return self.getTypedRuleContext(IDLParser.Signed_longlong_intContext,0)


        def signed_tiny_int(self):
            return self.getTypedRuleContext(IDLParser.Signed_tiny_intContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_signed_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_int" ):
                listener.enterSigned_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_int" ):
                listener.exitSigned_int(self)




    def signed_int(self):

        localctx = IDLParser.Signed_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_signed_int)
        try:
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.signed_short_int()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 767
                self.signed_long_int()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.signed_longlong_int()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 769
                self.signed_tiny_int()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_tiny_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INT8(self):
            return self.getToken(IDLParser.KW_INT8, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_signed_tiny_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_tiny_int" ):
                listener.enterSigned_tiny_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_tiny_int" ):
                listener.exitSigned_tiny_int(self)




    def signed_tiny_int(self):

        localctx = IDLParser.Signed_tiny_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_signed_tiny_int)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(IDLParser.KW_INT8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_short_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHORT(self):
            return self.getToken(IDLParser.KW_SHORT, 0)

        def KW_INT16(self):
            return self.getToken(IDLParser.KW_INT16, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_signed_short_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_short_int" ):
                listener.enterSigned_short_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_short_int" ):
                listener.exitSigned_short_int(self)




    def signed_short_int(self):

        localctx = IDLParser.Signed_short_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_signed_short_int)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            _la = self._input.LA(1)
            if not(_la==61 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_long_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LONG(self):
            return self.getToken(IDLParser.KW_LONG, 0)

        def KW_INT32(self):
            return self.getToken(IDLParser.KW_INT32, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_signed_long_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_long_int" ):
                listener.enterSigned_long_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_long_int" ):
                listener.exitSigned_long_int(self)




    def signed_long_int(self):

        localctx = IDLParser.Signed_long_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_signed_long_int)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            _la = self._input.LA(1)
            if not(_la==62 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_longlong_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LONG(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.KW_LONG)
            else:
                return self.getToken(IDLParser.KW_LONG, i)

        def KW_INT64(self):
            return self.getToken(IDLParser.KW_INT64, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_signed_longlong_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_longlong_int" ):
                listener.enterSigned_longlong_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_longlong_int" ):
                listener.exitSigned_longlong_int(self)




    def signed_longlong_int(self):

        localctx = IDLParser.Signed_longlong_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_signed_longlong_int)
        try:
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(IDLParser.KW_LONG)
                self.state = 779
                self.match(IDLParser.KW_LONG)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.match(IDLParser.KW_INT64)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_short_int(self):
            return self.getTypedRuleContext(IDLParser.Unsigned_short_intContext,0)


        def unsigned_long_int(self):
            return self.getTypedRuleContext(IDLParser.Unsigned_long_intContext,0)


        def unsigned_longlong_int(self):
            return self.getTypedRuleContext(IDLParser.Unsigned_longlong_intContext,0)


        def unsigned_tiny_int(self):
            return self.getTypedRuleContext(IDLParser.Unsigned_tiny_intContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_unsigned_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_int" ):
                listener.enterUnsigned_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_int" ):
                listener.exitUnsigned_int(self)




    def unsigned_int(self):

        localctx = IDLParser.Unsigned_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unsigned_int)
        try:
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.unsigned_short_int()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.unsigned_long_int()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 785
                self.unsigned_longlong_int()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 786
                self.unsigned_tiny_int()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_tiny_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UINT8(self):
            return self.getToken(IDLParser.KW_UINT8, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_unsigned_tiny_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_tiny_int" ):
                listener.enterUnsigned_tiny_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_tiny_int" ):
                listener.exitUnsigned_tiny_int(self)




    def unsigned_tiny_int(self):

        localctx = IDLParser.Unsigned_tiny_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_unsigned_tiny_int)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(IDLParser.KW_UINT8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_short_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNSIGNED(self):
            return self.getToken(IDLParser.KW_UNSIGNED, 0)

        def KW_SHORT(self):
            return self.getToken(IDLParser.KW_SHORT, 0)

        def KW_UINT16(self):
            return self.getToken(IDLParser.KW_UINT16, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_unsigned_short_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_short_int" ):
                listener.enterUnsigned_short_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_short_int" ):
                listener.exitUnsigned_short_int(self)




    def unsigned_short_int(self):

        localctx = IDLParser.Unsigned_short_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_unsigned_short_int)
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.match(IDLParser.KW_UNSIGNED)
                self.state = 792
                self.match(IDLParser.KW_SHORT)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(IDLParser.KW_UINT16)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_long_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNSIGNED(self):
            return self.getToken(IDLParser.KW_UNSIGNED, 0)

        def KW_LONG(self):
            return self.getToken(IDLParser.KW_LONG, 0)

        def KW_UINT32(self):
            return self.getToken(IDLParser.KW_UINT32, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_unsigned_long_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_long_int" ):
                listener.enterUnsigned_long_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_long_int" ):
                listener.exitUnsigned_long_int(self)




    def unsigned_long_int(self):

        localctx = IDLParser.Unsigned_long_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_unsigned_long_int)
        try:
            self.state = 799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.match(IDLParser.KW_UNSIGNED)
                self.state = 797
                self.match(IDLParser.KW_LONG)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(IDLParser.KW_UINT32)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_longlong_intContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNSIGNED(self):
            return self.getToken(IDLParser.KW_UNSIGNED, 0)

        def KW_LONG(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.KW_LONG)
            else:
                return self.getToken(IDLParser.KW_LONG, i)

        def KW_UINT64(self):
            return self.getToken(IDLParser.KW_UINT64, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_unsigned_longlong_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_longlong_int" ):
                listener.enterUnsigned_longlong_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_longlong_int" ):
                listener.exitUnsigned_longlong_int(self)




    def unsigned_longlong_int(self):

        localctx = IDLParser.Unsigned_longlong_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_unsigned_longlong_int)
        try:
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.match(IDLParser.KW_UNSIGNED)
                self.state = 802
                self.match(IDLParser.KW_LONG)
                self.state = 803
                self.match(IDLParser.KW_LONG)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.match(IDLParser.KW_UINT64)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CHAR(self):
            return self.getToken(IDLParser.KW_CHAR, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_char_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_type" ):
                listener.enterChar_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_type" ):
                listener.exitChar_type(self)




    def char_type(self):

        localctx = IDLParser.Char_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_char_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(IDLParser.KW_CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wide_char_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WCHAR(self):
            return self.getToken(IDLParser.KW_WCHAR, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_wide_char_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWide_char_type" ):
                listener.enterWide_char_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWide_char_type" ):
                listener.exitWide_char_type(self)




    def wide_char_type(self):

        localctx = IDLParser.Wide_char_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_wide_char_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(IDLParser.KW_WCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_BOOLEAN(self):
            return self.getToken(IDLParser.KW_BOOLEAN, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_boolean_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_type" ):
                listener.enterBoolean_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_type" ):
                listener.exitBoolean_type(self)




    def boolean_type(self):

        localctx = IDLParser.Boolean_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_boolean_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(IDLParser.KW_BOOLEAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Octet_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OCTET(self):
            return self.getToken(IDLParser.KW_OCTET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_octet_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOctet_type" ):
                listener.enterOctet_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOctet_type" ):
                listener.exitOctet_type(self)




    def octet_type(self):

        localctx = IDLParser.Octet_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_octet_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(IDLParser.KW_OCTET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ANY(self):
            return self.getToken(IDLParser.KW_ANY, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)




    def any_type(self):

        localctx = IDLParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_any_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(IDLParser.KW_ANY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OBJECT(self):
            return self.getToken(IDLParser.KW_OBJECT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type" ):
                listener.enterObject_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type" ):
                listener.exitObject_type(self)




    def object_type(self):

        localctx = IDLParser.Object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_object_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(IDLParser.KW_OBJECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_def(self):
            return self.getTypedRuleContext(IDLParser.Annotation_defContext,0)


        def annotation_forward_dcl(self):
            return self.getTypedRuleContext(IDLParser.Annotation_forward_dclContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_decl" ):
                listener.enterAnnotation_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_decl" ):
                listener.exitAnnotation_decl(self)




    def annotation_decl(self):

        localctx = IDLParser.Annotation_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_annotation_decl)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.annotation_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.annotation_forward_dcl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_header(self):
            return self.getTypedRuleContext(IDLParser.Annotation_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def annotation_body(self):
            return self.getTypedRuleContext(IDLParser.Annotation_bodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_annotation_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_def" ):
                listener.enterAnnotation_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_def" ):
                listener.exitAnnotation_def(self)




    def annotation_def(self):

        localctx = IDLParser.Annotation_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_annotation_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.annotation_header()
            self.state = 824
            self.match(IDLParser.LEFT_BRACE)
            self.state = 825
            self.annotation_body()
            self.state = 826
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AT_ANNOTATION(self):
            return self.getToken(IDLParser.KW_AT_ANNOTATION, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def annotation_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Annotation_inheritance_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_header" ):
                listener.enterAnnotation_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_header" ):
                listener.exitAnnotation_header(self)




    def annotation_header(self):

        localctx = IDLParser.Annotation_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_annotation_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(IDLParser.KW_AT_ANNOTATION)
            self.state = 829
            self.identifier()
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 830
                self.annotation_inheritance_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_inheritance_spec" ):
                listener.enterAnnotation_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_inheritance_spec" ):
                listener.exitAnnotation_inheritance_spec(self)




    def annotation_inheritance_spec(self):

        localctx = IDLParser.Annotation_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_annotation_inheritance_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(IDLParser.COLON)
            self.state = 834
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Annotation_memberContext)
            else:
                return self.getTypedRuleContext(IDLParser.Annotation_memberContext,i)


        def enum_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Enum_typeContext)
            else:
                return self.getTypedRuleContext(IDLParser.Enum_typeContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.SEMICOLON)
            else:
                return self.getToken(IDLParser.SEMICOLON, i)

        def const_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Const_declContext)
            else:
                return self.getTypedRuleContext(IDLParser.Const_declContext,i)


        def KW_TYPEDEF(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.KW_TYPEDEF)
            else:
                return self.getToken(IDLParser.KW_TYPEDEF, i)

        def type_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Type_declaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.Type_declaratorContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_body" ):
                listener.enterAnnotation_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_body" ):
                listener.exitAnnotation_body(self)




    def annotation_body(self):

        localctx = IDLParser.Annotation_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotation_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2161652465936629760) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 843325556154433) != 0):
                self.state = 847
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32, 35, 39, 46, 57, 61, 62, 64, 77, 78, 82, 84, 85, 91, 104, 105, 106, 107, 108, 109, 110, 111, 113]:
                    self.state = 836
                    self.annotation_member()
                    pass
                elif token in [63]:
                    self.state = 837
                    self.enum_type()
                    self.state = 838
                    self.match(IDLParser.SEMICOLON)
                    pass
                elif token in [70]:
                    self.state = 840
                    self.const_decl()
                    self.state = 841
                    self.match(IDLParser.SEMICOLON)
                    pass
                elif token in [42]:
                    self.state = 843
                    self.match(IDLParser.KW_TYPEDEF)
                    self.state = 844
                    self.type_declarator()
                    self.state = 845
                    self.match(IDLParser.SEMICOLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_type(self):
            return self.getTypedRuleContext(IDLParser.Const_typeContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def KW_DEFAULT(self):
            return self.getToken(IDLParser.KW_DEFAULT, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_member" ):
                listener.enterAnnotation_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_member" ):
                listener.exitAnnotation_member(self)




    def annotation_member(self):

        localctx = IDLParser.Annotation_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_annotation_member)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.const_type()
            self.state = 853
            self.simple_declarator()
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 854
                self.match(IDLParser.KW_DEFAULT)
                self.state = 855
                self.const_exp()


            self.state = 858
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_forward_dclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AT_ANNOTATION(self):
            return self.getToken(IDLParser.KW_AT_ANNOTATION, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation_forward_dcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_forward_dcl" ):
                listener.enterAnnotation_forward_dcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_forward_dcl" ):
                listener.exitAnnotation_forward_dcl(self)




    def annotation_forward_dcl(self):

        localctx = IDLParser.Annotation_forward_dclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_annotation_forward_dcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(IDLParser.KW_AT_ANNOTATION)
            self.state = 861
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitset_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_BITSET(self):
            return self.getToken(IDLParser.KW_BITSET, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def bitfield(self):
            return self.getTypedRuleContext(IDLParser.BitfieldContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_bitset_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitset_type" ):
                listener.enterBitset_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitset_type" ):
                listener.exitBitset_type(self)




    def bitset_type(self):

        localctx = IDLParser.Bitset_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_bitset_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(IDLParser.KW_BITSET)
            self.state = 864
            self.identifier()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 865
                self.match(IDLParser.COLON)
                self.state = 866
                self.scoped_name()


            self.state = 869
            self.match(IDLParser.LEFT_BRACE)
            self.state = 870
            self.bitfield()
            self.state = 871
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitfieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitfield_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Bitfield_specContext)
            else:
                return self.getTypedRuleContext(IDLParser.Bitfield_specContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.SEMICOLON)
            else:
                return self.getToken(IDLParser.SEMICOLON, i)

        def simple_declarators(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_declaratorsContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_declaratorsContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_bitfield

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitfield" ):
                listener.enterBitfield(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitfield" ):
                listener.exitBitfield(self)




    def bitfield(self):

        localctx = IDLParser.BitfieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_bitfield)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 873
                self.bitfield_spec()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35 or _la==113:
                    self.state = 874
                    self.simple_declarators()


                self.state = 877
                self.match(IDLParser.SEMICOLON)
                self.state = 881 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==35 or _la==101):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitfield_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def KW_BITFIELD(self):
            return self.getToken(IDLParser.KW_BITFIELD, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def COMMA(self):
            return self.getToken(IDLParser.COMMA, 0)

        def bitfield_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Bitfield_type_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_bitfield_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitfield_spec" ):
                listener.enterBitfield_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitfield_spec" ):
                listener.exitBitfield_spec(self)




    def bitfield_spec(self):

        localctx = IDLParser.Bitfield_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_bitfield_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.annapps()
            self.state = 884
            self.match(IDLParser.KW_BITFIELD)
            self.state = 885
            self.match(IDLParser.LEFT_ANG_BRACKET)
            self.state = 886
            self.positive_int_const()
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 887
                self.match(IDLParser.COMMA)
                self.state = 888
                self.bitfield_type_spec()


            self.state = 891
            self.match(IDLParser.RIGHT_ANG_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitmask_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_BITMASK(self):
            return self.getToken(IDLParser.KW_BITMASK, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def bit_values(self):
            return self.getTypedRuleContext(IDLParser.Bit_valuesContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_bitmask_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitmask_type" ):
                listener.enterBitmask_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitmask_type" ):
                listener.exitBitmask_type(self)




    def bitmask_type(self):

        localctx = IDLParser.Bitmask_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_bitmask_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(IDLParser.KW_BITMASK)
            self.state = 894
            self.identifier()
            self.state = 895
            self.match(IDLParser.LEFT_BRACE)
            self.state = 896
            self.bit_values()
            self.state = 897
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(IDLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_bit_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_values" ):
                listener.enterBit_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_values" ):
                listener.exitBit_values(self)




    def bit_values(self):

        localctx = IDLParser.Bit_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_bit_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.identifier()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 900
                self.match(IDLParser.COMMA)
                self.state = 901
                self.identifier()
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(IDLParser.KW_STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def member_list(self):
            return self.getTypedRuleContext(IDLParser.Member_listContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_struct_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_type" ):
                listener.enterStruct_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_type" ):
                listener.exitStruct_type(self)




    def struct_type(self):

        localctx = IDLParser.Struct_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_struct_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(IDLParser.KW_STRUCT)
            self.state = 908
            self.identifier()
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 909
                self.match(IDLParser.COLON)
                self.state = 910
                self.scoped_name()


            self.state = 913
            self.match(IDLParser.LEFT_BRACE)
            self.state = 914
            self.member_list()
            self.state = 915
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.MemberContext)
            else:
                return self.getTypedRuleContext(IDLParser.MemberContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_member_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_list" ):
                listener.enterMember_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_list" ):
                listener.exitMember_list(self)




    def member_list(self):

        localctx = IDLParser.Member_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_member_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2160953176541364224) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844253269256321) != 0):
                self.state = 917
                self.member()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarators(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember" ):
                listener.enterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember" ):
                listener.exitMember(self)




    def member(self):

        localctx = IDLParser.MemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.annapps()
            self.state = 924
            self.type_spec()
            self.state = 925
            self.declarators()
            self.state = 926
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNION(self):
            return self.getToken(IDLParser.KW_UNION, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def KW_SWITCH(self):
            return self.getToken(IDLParser.KW_SWITCH, 0)

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def switch_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Switch_type_specContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def switch_body(self):
            return self.getTypedRuleContext(IDLParser.Switch_bodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_union_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_type" ):
                listener.enterUnion_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_type" ):
                listener.exitUnion_type(self)




    def union_type(self):

        localctx = IDLParser.Union_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_union_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(IDLParser.KW_UNION)
            self.state = 929
            self.identifier()
            self.state = 930
            self.match(IDLParser.KW_SWITCH)
            self.state = 931
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 932
            self.annapps()
            self.state = 933
            self.switch_type_spec()
            self.state = 934
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 935
            self.match(IDLParser.LEFT_BRACE)
            self.state = 936
            self.switch_body()
            self.state = 937
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_type(self):
            return self.getTypedRuleContext(IDLParser.Integer_typeContext,0)


        def char_type(self):
            return self.getTypedRuleContext(IDLParser.Char_typeContext,0)


        def wide_char_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_char_typeContext,0)


        def octet_type(self):
            return self.getTypedRuleContext(IDLParser.Octet_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(IDLParser.Boolean_typeContext,0)


        def enum_type(self):
            return self.getTypedRuleContext(IDLParser.Enum_typeContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_switch_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_type_spec" ):
                listener.enterSwitch_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_type_spec" ):
                listener.exitSwitch_type_spec(self)




    def switch_type_spec(self):

        localctx = IDLParser.Switch_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_switch_type_spec)
        try:
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 62, 77, 104, 105, 106, 107, 108, 109, 110, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                self.integer_type()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.char_type()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.wide_char_type()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 942
                self.octet_type()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 5)
                self.state = 943
                self.boolean_type()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 6)
                self.state = 944
                self.enum_type()
                pass
            elif token in [32, 113]:
                self.enterOuterAlt(localctx, 7)
                self.state = 945
                self.scoped_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Case_stmtContext)
            else:
                return self.getTypedRuleContext(IDLParser.Case_stmtContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_switch_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_body" ):
                listener.enterSwitch_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_body" ):
                listener.exitSwitch_body(self)




    def switch_body(self):

        localctx = IDLParser.Switch_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_switch_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 948
                self.case_stmt()
                self.state = 951 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 281474993487873) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_spec(self):
            return self.getTypedRuleContext(IDLParser.Element_specContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def case_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Case_labelContext)
            else:
                return self.getTypedRuleContext(IDLParser.Case_labelContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_case_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_stmt" ):
                listener.enterCase_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_stmt" ):
                listener.exitCase_stmt(self)




    def case_stmt(self):

        localctx = IDLParser.Case_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_case_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 953
                    self.case_label()

                else:
                    raise NoViableAltException(self)
                self.state = 956 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 958
            self.element_spec()
            self.state = 959
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def KW_CASE(self):
            return self.getToken(IDLParser.KW_CASE, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def KW_DEFAULT(self):
            return self.getToken(IDLParser.KW_DEFAULT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_case_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_label" ):
                listener.enterCase_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_label" ):
                listener.exitCase_label(self)




    def case_label(self):

        localctx = IDLParser.Case_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_case_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.annapps()
            self.state = 968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.state = 962
                self.match(IDLParser.KW_CASE)
                self.state = 963
                self.const_exp()
                self.state = 964
                self.match(IDLParser.COLON)
                pass
            elif token in [59]:
                self.state = 966
                self.match(IDLParser.KW_DEFAULT)
                self.state = 967
                self.match(IDLParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarator(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)




    def element_spec(self):

        localctx = IDLParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_element_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.annapps()
            self.state = 971
            self.type_spec()
            self.state = 972
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENUM(self):
            return self.getToken(IDLParser.KW_ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.EnumeratorContext,i)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_enum_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_type" ):
                listener.enterEnum_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_type" ):
                listener.exitEnum_type(self)




    def enum_type(self):

        localctx = IDLParser.Enum_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_enum_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(IDLParser.KW_ENUM)
            self.state = 975
            self.identifier()
            self.state = 976
            self.match(IDLParser.LEFT_BRACE)
            self.state = 977
            self.enumerator()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 978
                self.match(IDLParser.COMMA)
                self.state = 979
                self.enumerator()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 985
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = IDLParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SEQUENCE(self):
            return self.getToken(IDLParser.KW_SEQUENCE, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def simple_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Simple_type_specContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def COMMA(self):
            return self.getToken(IDLParser.COMMA, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_sequence_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_type" ):
                listener.enterSequence_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_type" ):
                listener.exitSequence_type(self)




    def sequence_type(self):

        localctx = IDLParser.Sequence_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_sequence_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(IDLParser.KW_SEQUENCE)
            self.state = 990
            self.match(IDLParser.LEFT_ANG_BRACKET)
            self.state = 991
            self.annapps()
            self.state = 992
            self.simple_type_spec()
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 993
                self.match(IDLParser.COMMA)
                self.state = 994
                self.positive_int_const()


            self.state = 997
            self.match(IDLParser.RIGHT_ANG_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(IDLParser.KW_SET, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def simple_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Simple_type_specContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def COMMA(self):
            return self.getToken(IDLParser.COMMA, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_set_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_type" ):
                listener.enterSet_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_type" ):
                listener.exitSet_type(self)




    def set_type(self):

        localctx = IDLParser.Set_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_set_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(IDLParser.KW_SET)
            self.state = 1000
            self.match(IDLParser.LEFT_ANG_BRACKET)
            self.state = 1001
            self.simple_type_spec()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1002
                self.match(IDLParser.COMMA)
                self.state = 1003
                self.positive_int_const()


            self.state = 1006
            self.match(IDLParser.RIGHT_ANG_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MAP(self):
            return self.getToken(IDLParser.KW_MAP, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def simple_type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_type_specContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_type_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_map_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_type" ):
                listener.enterMap_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_type" ):
                listener.exitMap_type(self)




    def map_type(self):

        localctx = IDLParser.Map_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_map_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(IDLParser.KW_MAP)
            self.state = 1009
            self.match(IDLParser.LEFT_ANG_BRACKET)
            self.state = 1010
            self.simple_type_spec()
            self.state = 1011
            self.match(IDLParser.COMMA)
            self.state = 1012
            self.simple_type_spec()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1013
                self.match(IDLParser.COMMA)
                self.state = 1014
                self.positive_int_const()


            self.state = 1017
            self.match(IDLParser.RIGHT_ANG_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRING(self):
            return self.getToken(IDLParser.KW_STRING, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_string_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_type" ):
                listener.enterString_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_type" ):
                listener.exitString_type(self)




    def string_type(self):

        localctx = IDLParser.String_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_string_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(IDLParser.KW_STRING)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 1020
                self.match(IDLParser.LEFT_ANG_BRACKET)
                self.state = 1021
                self.positive_int_const()
                self.state = 1022
                self.match(IDLParser.RIGHT_ANG_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wide_string_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WSTRING(self):
            return self.getToken(IDLParser.KW_WSTRING, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_wide_string_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWide_string_type" ):
                listener.enterWide_string_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWide_string_type" ):
                listener.exitWide_string_type(self)




    def wide_string_type(self):

        localctx = IDLParser.Wide_string_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_wide_string_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(IDLParser.KW_WSTRING)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 1027
                self.match(IDLParser.LEFT_ANG_BRACKET)
                self.state = 1028
                self.positive_int_const()
                self.state = 1029
                self.match(IDLParser.RIGHT_ANG_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def fixed_array_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Fixed_array_sizeContext)
            else:
                return self.getTypedRuleContext(IDLParser.Fixed_array_sizeContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_array_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_declarator" ):
                listener.enterArray_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_declarator" ):
                listener.exitArray_declarator(self)




    def array_declarator(self):

        localctx = IDLParser.Array_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_array_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(IDLParser.ID)
            self.state = 1035 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1034
                self.fixed_array_size()
                self.state = 1037 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==18):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_array_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_SQUARE_BRACKET(self):
            return self.getToken(IDLParser.LEFT_SQUARE_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_SQUARE_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_fixed_array_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_array_size" ):
                listener.enterFixed_array_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_array_size" ):
                listener.exitFixed_array_size(self)




    def fixed_array_size(self):

        localctx = IDLParser.Fixed_array_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_fixed_array_size)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(IDLParser.LEFT_SQUARE_BRACKET)
            self.state = 1040
            self.positive_int_const()
            self.state = 1041
            self.match(IDLParser.RIGHT_SQUARE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def readonly_attr_spec(self):
            return self.getTypedRuleContext(IDLParser.Readonly_attr_specContext,0)


        def attr_spec(self):
            return self.getTypedRuleContext(IDLParser.Attr_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_attr_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_decl" ):
                listener.enterAttr_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_decl" ):
                listener.exitAttr_decl(self)




    def attr_decl(self):

        localctx = IDLParser.Attr_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_attr_decl)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.readonly_attr_spec()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.attr_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXCEPTION(self):
            return self.getToken(IDLParser.KW_EXCEPTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.MemberContext)
            else:
                return self.getTypedRuleContext(IDLParser.MemberContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_except_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_decl" ):
                listener.enterExcept_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_decl" ):
                listener.exitExcept_decl(self)




    def except_decl(self):

        localctx = IDLParser.Except_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_except_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(IDLParser.KW_EXCEPTION)
            self.state = 1048
            self.identifier()
            self.state = 1049
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2160953176541364224) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844253269256321) != 0):
                self.state = 1050
                self.member()
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1056
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Op_type_specContext,0)


        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def parameter_decls(self):
            return self.getTypedRuleContext(IDLParser.Parameter_declsContext,0)


        def op_attribute(self):
            return self.getTypedRuleContext(IDLParser.Op_attributeContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def context_expr(self):
            return self.getTypedRuleContext(IDLParser.Context_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_op_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp_decl" ):
                listener.enterOp_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp_decl" ):
                listener.exitOp_decl(self)




    def op_decl(self):

        localctx = IDLParser.Op_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_op_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 1058
                self.op_attribute()


            self.state = 1061
            self.op_type_spec()
            self.state = 1062
            self.identifier()
            self.state = 1063
            self.parameter_decls()
            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1064
                self.raises_expr()


            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1067
                self.context_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ONEWAY(self):
            return self.getToken(IDLParser.KW_ONEWAY, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_op_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp_attribute" ):
                listener.enterOp_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp_attribute" ):
                listener.exitOp_attribute(self)




    def op_attribute(self):

        localctx = IDLParser.Op_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_op_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(IDLParser.KW_ONEWAY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def KW_VOID(self):
            return self.getToken(IDLParser.KW_VOID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_op_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp_type_spec" ):
                listener.enterOp_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp_type_spec" ):
                listener.exitOp_type_spec(self)




    def op_type_spec(self):

        localctx = IDLParser.Op_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_op_type_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.annapps()
            self.state = 1075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 39, 46, 57, 61, 62, 64, 71, 75, 77, 81, 82, 84, 85, 91, 104, 105, 106, 107, 108, 109, 110, 111, 113]:
                self.state = 1073
                self.param_type_spec()
                pass
            elif token in [54]:
                self.state = 1074
                self.match(IDLParser.KW_VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_declsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def param_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Param_declContext)
            else:
                return self.getTypedRuleContext(IDLParser.Param_declContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_parameter_decls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_decls" ):
                listener.enterParameter_decls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_decls" ):
                listener.exitParameter_decls(self)




    def parameter_decls(self):

        localctx = IDLParser.Parameter_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_parameter_decls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 9007199263129605) != 0):
                self.state = 1078
                self.param_decl()
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 1079
                    self.match(IDLParser.COMMA)
                    self.state = 1080
                    self.param_decl()
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1088
            self.match(IDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.AnnappsContext)
            else:
                return self.getTypedRuleContext(IDLParser.AnnappsContext,i)


        def param_attribute(self):
            return self.getTypedRuleContext(IDLParser.Param_attributeContext,0)


        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_param_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_decl" ):
                listener.enterParam_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_decl" ):
                listener.exitParam_decl(self)




    def param_decl(self):

        localctx = IDLParser.Param_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_param_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.annapps()
            self.state = 1091
            self.param_attribute()
            self.state = 1092
            self.annapps()
            self.state = 1093
            self.param_type_spec()
            self.state = 1094
            self.annapps()
            self.state = 1095
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IN(self):
            return self.getToken(IDLParser.KW_IN, 0)

        def KW_OUT(self):
            return self.getToken(IDLParser.KW_OUT, 0)

        def KW_INOUT(self):
            return self.getToken(IDLParser.KW_INOUT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_param_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_attribute" ):
                listener.enterParam_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_attribute" ):
                listener.exitParam_attribute(self)




    def param_attribute(self):

        localctx = IDLParser.Param_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_param_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 2251799815782401) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raises_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RAISES(self):
            return self.getToken(IDLParser.KW_RAISES, 0)

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def a_scoped_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.A_scoped_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_raises_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaises_expr" ):
                listener.enterRaises_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaises_expr" ):
                listener.exitRaises_expr(self)




    def raises_expr(self):

        localctx = IDLParser.Raises_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_raises_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(IDLParser.KW_RAISES)
            self.state = 1100
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1101
            self.a_scoped_name()
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 1102
                self.match(IDLParser.COMMA)
                self.state = 1103
                self.a_scoped_name()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1109
            self.match(IDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Context_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(IDLParser.KW_CONTEXT, 0)

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.STRING_LITERAL)
            else:
                return self.getToken(IDLParser.STRING_LITERAL, i)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_context_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContext_expr" ):
                listener.enterContext_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContext_expr" ):
                listener.exitContext_expr(self)




    def context_expr(self):

        localctx = IDLParser.Context_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_context_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(IDLParser.KW_CONTEXT)
            self.state = 1112
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1113
            self.match(IDLParser.STRING_LITERAL)
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 1114
                self.match(IDLParser.COMMA)
                self.state = 1115
                self.match(IDLParser.STRING_LITERAL)
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1121
            self.match(IDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Base_type_specContext,0)


        def string_type(self):
            return self.getTypedRuleContext(IDLParser.String_typeContext,0)


        def wide_string_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_string_typeContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_param_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type_spec" ):
                listener.enterParam_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type_spec" ):
                listener.exitParam_type_spec(self)




    def param_type_spec(self):

        localctx = IDLParser.Param_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_param_type_spec)
        try:
            self.state = 1127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 57, 61, 62, 71, 75, 77, 81, 82, 84, 85, 91, 104, 105, 106, 107, 108, 109, 110, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                self.base_type_spec()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.string_type()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1125
                self.wide_string_type()
                pass
            elif token in [32, 113]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1126
                self.scoped_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIXED(self):
            return self.getToken(IDLParser.KW_FIXED, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def positive_int_const(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Positive_int_constContext)
            else:
                return self.getTypedRuleContext(IDLParser.Positive_int_constContext,i)


        def COMMA(self):
            return self.getToken(IDLParser.COMMA, 0)

        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_fixed_pt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pt_type" ):
                listener.enterFixed_pt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pt_type" ):
                listener.exitFixed_pt_type(self)




    def fixed_pt_type(self):

        localctx = IDLParser.Fixed_pt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_fixed_pt_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(IDLParser.KW_FIXED)
            self.state = 1130
            self.match(IDLParser.LEFT_ANG_BRACKET)
            self.state = 1131
            self.positive_int_const()
            self.state = 1132
            self.match(IDLParser.COMMA)
            self.state = 1133
            self.positive_int_const()
            self.state = 1134
            self.match(IDLParser.RIGHT_ANG_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pt_const_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIXED(self):
            return self.getToken(IDLParser.KW_FIXED, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_fixed_pt_const_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pt_const_type" ):
                listener.enterFixed_pt_const_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pt_const_type" ):
                listener.exitFixed_pt_const_type(self)




    def fixed_pt_const_type(self):

        localctx = IDLParser.Fixed_pt_const_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_fixed_pt_const_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(IDLParser.KW_FIXED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUEBASE(self):
            return self.getToken(IDLParser.KW_VALUEBASE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_value_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_base_type" ):
                listener.enterValue_base_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_base_type" ):
                listener.exitValue_base_type(self)




    def value_base_type(self):

        localctx = IDLParser.Value_base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_value_base_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(IDLParser.KW_VALUEBASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constr_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(IDLParser.KW_STRUCT, 0)

        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def KW_UNION(self):
            return self.getToken(IDLParser.KW_UNION, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_constr_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstr_forward_decl" ):
                listener.enterConstr_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstr_forward_decl" ):
                listener.exitConstr_forward_decl(self)




    def constr_forward_decl(self):

        localctx = IDLParser.Constr_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_constr_forward_decl)
        try:
            self.state = 1144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.match(IDLParser.KW_STRUCT)
                self.state = 1141
                self.match(IDLParser.ID)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1142
                self.match(IDLParser.KW_UNION)
                self.state = 1143
                self.match(IDLParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.AnnappsContext)
            else:
                return self.getTypedRuleContext(IDLParser.AnnappsContext,i)


        def KW_IMPORT(self):
            return self.getToken(IDLParser.KW_IMPORT, 0)

        def imported_scope(self):
            return self.getTypedRuleContext(IDLParser.Imported_scopeContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_import_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_decl" ):
                listener.enterImport_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_decl" ):
                listener.exitImport_decl(self)




    def import_decl(self):

        localctx = IDLParser.Import_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_import_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.annapps()
            self.state = 1147
            self.match(IDLParser.KW_IMPORT)
            self.state = 1148
            self.annapps()
            self.state = 1149
            self.imported_scope()
            self.state = 1150
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imported_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_imported_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImported_scope" ):
                listener.enterImported_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImported_scope" ):
                listener.exitImported_scope(self)




    def imported_scope(self):

        localctx = IDLParser.Imported_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_imported_scope)
        try:
            self.state = 1154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1152
                self.scoped_name()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.match(IDLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_id_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPEID(self):
            return self.getToken(IDLParser.KW_TYPEID, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_type_id_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_id_decl" ):
                listener.enterType_id_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_id_decl" ):
                listener.exitType_id_decl(self)




    def type_id_decl(self):

        localctx = IDLParser.Type_id_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_type_id_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(IDLParser.KW_TYPEID)
            self.state = 1157
            self.a_scoped_name()
            self.state = 1158
            self.match(IDLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_prefix_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPEPREFIX(self):
            return self.getToken(IDLParser.KW_TYPEPREFIX, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_type_prefix_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix_decl" ):
                listener.enterType_prefix_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix_decl" ):
                listener.exitType_prefix_decl(self)




    def type_prefix_decl(self):

        localctx = IDLParser.Type_prefix_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_type_prefix_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(IDLParser.KW_TYPEPREFIX)
            self.state = 1161
            self.a_scoped_name()
            self.state = 1162
            self.match(IDLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Readonly_attr_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READONLY(self):
            return self.getToken(IDLParser.KW_READONLY, 0)

        def KW_ATTRIBUTE(self):
            return self.getToken(IDLParser.KW_ATTRIBUTE, 0)

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def readonly_attr_declarator(self):
            return self.getTypedRuleContext(IDLParser.Readonly_attr_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_readonly_attr_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadonly_attr_spec" ):
                listener.enterReadonly_attr_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadonly_attr_spec" ):
                listener.exitReadonly_attr_spec(self)




    def readonly_attr_spec(self):

        localctx = IDLParser.Readonly_attr_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_readonly_attr_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.match(IDLParser.KW_READONLY)
            self.state = 1165
            self.match(IDLParser.KW_ATTRIBUTE)
            self.state = 1166
            self.annapps()
            self.state = 1167
            self.param_type_spec()
            self.state = 1168
            self.readonly_attr_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Readonly_attr_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.AnnappsContext)
            else:
                return self.getTypedRuleContext(IDLParser.AnnappsContext,i)


        def simple_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_declaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,i)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_readonly_attr_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadonly_attr_declarator" ):
                listener.enterReadonly_attr_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadonly_attr_declarator" ):
                listener.exitReadonly_attr_declarator(self)




    def readonly_attr_declarator(self):

        localctx = IDLParser.Readonly_attr_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_readonly_attr_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.annapps()
            self.state = 1171
            self.simple_declarator()
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 1172
                self.raises_expr()
                pass
            elif token in [11, 13]:
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 1173
                    self.match(IDLParser.COMMA)
                    self.state = 1174
                    self.annapps()
                    self.state = 1175
                    self.simple_declarator()
                    self.state = 1181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ATTRIBUTE(self):
            return self.getToken(IDLParser.KW_ATTRIBUTE, 0)

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def attr_declarator(self):
            return self.getTypedRuleContext(IDLParser.Attr_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_attr_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_spec" ):
                listener.enterAttr_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_spec" ):
                listener.exitAttr_spec(self)




    def attr_spec(self):

        localctx = IDLParser.Attr_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_attr_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(IDLParser.KW_ATTRIBUTE)
            self.state = 1185
            self.annapps()
            self.state = 1186
            self.param_type_spec()
            self.state = 1187
            self.attr_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.AnnappsContext)
            else:
                return self.getTypedRuleContext(IDLParser.AnnappsContext,i)


        def simple_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_declaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,i)


        def attr_raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Attr_raises_exprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_attr_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_declarator" ):
                listener.enterAttr_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_declarator" ):
                listener.exitAttr_declarator(self)




    def attr_declarator(self):

        localctx = IDLParser.Attr_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_attr_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.annapps()
            self.state = 1190
            self.simple_declarator()
            self.state = 1201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36, 69]:
                self.state = 1191
                self.attr_raises_expr()
                pass
            elif token in [11, 13]:
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 1192
                    self.match(IDLParser.COMMA)
                    self.state = 1193
                    self.annapps()
                    self.state = 1194
                    self.simple_declarator()
                    self.state = 1200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_raises_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def get_excep_expr(self):
            return self.getTypedRuleContext(IDLParser.Get_excep_exprContext,0)


        def set_excep_expr(self):
            return self.getTypedRuleContext(IDLParser.Set_excep_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_attr_raises_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_raises_expr" ):
                listener.enterAttr_raises_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_raises_expr" ):
                listener.exitAttr_raises_expr(self)




    def attr_raises_expr(self):

        localctx = IDLParser.Attr_raises_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_attr_raises_expr)
        self._la = 0 # Token type
        try:
            self.state = 1208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.get_excep_expr()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 1204
                    self.set_excep_expr()


                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.set_excep_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_excep_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GETRAISES(self):
            return self.getToken(IDLParser.KW_GETRAISES, 0)

        def exception_list(self):
            return self.getTypedRuleContext(IDLParser.Exception_listContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_get_excep_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_excep_expr" ):
                listener.enterGet_excep_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_excep_expr" ):
                listener.exitGet_excep_expr(self)




    def get_excep_expr(self):

        localctx = IDLParser.Get_excep_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_get_excep_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(IDLParser.KW_GETRAISES)
            self.state = 1211
            self.exception_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_excep_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SETRAISES(self):
            return self.getToken(IDLParser.KW_SETRAISES, 0)

        def exception_list(self):
            return self.getTypedRuleContext(IDLParser.Exception_listContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_set_excep_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_excep_expr" ):
                listener.enterSet_excep_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_excep_expr" ):
                listener.exitSet_excep_expr(self)




    def set_excep_expr(self):

        localctx = IDLParser.Set_excep_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_set_excep_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(IDLParser.KW_SETRAISES)
            self.state = 1214
            self.exception_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def a_scoped_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.A_scoped_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_exception_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_list" ):
                listener.enterException_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_list" ):
                listener.exitException_list(self)




    def exception_list(self):

        localctx = IDLParser.Exception_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_exception_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1217
            self.a_scoped_name()
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 1218
                self.match(IDLParser.COMMA)
                self.state = 1219
                self.a_scoped_name()
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1225
            self.match(IDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_decl(self):
            return self.getTypedRuleContext(IDLParser.Component_declContext,0)


        def component_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Component_forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent" ):
                listener.enterComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent" ):
                listener.exitComponent(self)




    def component(self):

        localctx = IDLParser.ComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_component)
        try:
            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.component_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1228
                self.component_forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMPONENT(self):
            return self.getToken(IDLParser.KW_COMPONENT, 0)

        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_component_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_forward_decl" ):
                listener.enterComponent_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_forward_decl" ):
                listener.exitComponent_forward_decl(self)




    def component_forward_decl(self):

        localctx = IDLParser.Component_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_component_forward_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(IDLParser.KW_COMPONENT)
            self.state = 1232
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_header(self):
            return self.getTypedRuleContext(IDLParser.Component_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def component_body(self):
            return self.getTypedRuleContext(IDLParser.Component_bodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_component_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_decl" ):
                listener.enterComponent_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_decl" ):
                listener.exitComponent_decl(self)




    def component_decl(self):

        localctx = IDLParser.Component_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_component_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.component_header()
            self.state = 1235
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1236
            self.component_body()
            self.state = 1237
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMPONENT(self):
            return self.getToken(IDLParser.KW_COMPONENT, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def component_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Component_inheritance_specContext,0)


        def supported_interface_spec(self):
            return self.getTypedRuleContext(IDLParser.Supported_interface_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_header" ):
                listener.enterComponent_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_header" ):
                listener.exitComponent_header(self)




    def component_header(self):

        localctx = IDLParser.Component_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_component_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(IDLParser.KW_COMPONENT)
            self.state = 1240
            self.identifier()
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1241
                self.component_inheritance_spec()


            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1244
                self.supported_interface_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supported_interface_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SUPPORTS(self):
            return self.getToken(IDLParser.KW_SUPPORTS, 0)

        def a_scoped_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.A_scoped_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_supported_interface_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupported_interface_spec" ):
                listener.enterSupported_interface_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupported_interface_spec" ):
                listener.exitSupported_interface_spec(self)




    def supported_interface_spec(self):

        localctx = IDLParser.Supported_interface_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_supported_interface_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(IDLParser.KW_SUPPORTS)
            self.state = 1248
            self.a_scoped_name()
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 1249
                self.match(IDLParser.COMMA)
                self.state = 1250
                self.a_scoped_name()
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_inheritance_spec" ):
                listener.enterComponent_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_inheritance_spec" ):
                listener.exitComponent_inheritance_spec(self)




    def component_inheritance_spec(self):

        localctx = IDLParser.Component_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_component_inheritance_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(IDLParser.COLON)
            self.state = 1257
            self.a_scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_export(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Component_exportContext)
            else:
                return self.getTypedRuleContext(IDLParser.Component_exportContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_component_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_body" ):
                listener.enterComponent_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_body" ):
                listener.exitComponent_body(self)




    def component_body(self):

        localctx = IDLParser.Component_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_component_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 630503947831935305) != 0):
                self.state = 1259
                self.component_export()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_exportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def provides_decl(self):
            return self.getTypedRuleContext(IDLParser.Provides_declContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def uses_decl(self):
            return self.getTypedRuleContext(IDLParser.Uses_declContext,0)


        def emits_decl(self):
            return self.getTypedRuleContext(IDLParser.Emits_declContext,0)


        def publishes_decl(self):
            return self.getTypedRuleContext(IDLParser.Publishes_declContext,0)


        def consumes_decl(self):
            return self.getTypedRuleContext(IDLParser.Consumes_declContext,0)


        def attr_decl(self):
            return self.getTypedRuleContext(IDLParser.Attr_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component_export

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_export" ):
                listener.enterComponent_export(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_export" ):
                listener.exitComponent_export(self)




    def component_export(self):

        localctx = IDLParser.Component_exportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_component_export)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.annapps()
            self.state = 1284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.state = 1266
                self.provides_decl()
                self.state = 1267
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [43]:
                self.state = 1269
                self.uses_decl()
                self.state = 1270
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [38]:
                self.state = 1272
                self.emits_decl()
                self.state = 1273
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [41]:
                self.state = 1275
                self.publishes_decl()
                self.state = 1276
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [90]:
                self.state = 1278
                self.consumes_decl()
                self.state = 1279
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [51, 94]:
                self.state = 1281
                self.attr_decl()
                self.state = 1282
                self.match(IDLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provides_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PROVIDES(self):
            return self.getToken(IDLParser.KW_PROVIDES, 0)

        def interface_type(self):
            return self.getTypedRuleContext(IDLParser.Interface_typeContext,0)


        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_provides_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvides_decl" ):
                listener.enterProvides_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvides_decl" ):
                listener.exitProvides_decl(self)




    def provides_decl(self):

        localctx = IDLParser.Provides_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_provides_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(IDLParser.KW_PROVIDES)
            self.state = 1287
            self.interface_type()
            self.state = 1288
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def KW_OBJECT(self):
            return self.getToken(IDLParser.KW_OBJECT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type" ):
                listener.enterInterface_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type" ):
                listener.exitInterface_type(self)




    def interface_type(self):

        localctx = IDLParser.Interface_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_interface_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.annapps()
            self.state = 1293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 113]:
                self.state = 1291
                self.scoped_name()
                pass
            elif token in [75]:
                self.state = 1292
                self.match(IDLParser.KW_OBJECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uses_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USES(self):
            return self.getToken(IDLParser.KW_USES, 0)

        def interface_type(self):
            return self.getTypedRuleContext(IDLParser.Interface_typeContext,0)


        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def KW_MULTIPLE(self):
            return self.getToken(IDLParser.KW_MULTIPLE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_uses_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUses_decl" ):
                listener.enterUses_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUses_decl" ):
                listener.exitUses_decl(self)




    def uses_decl(self):

        localctx = IDLParser.Uses_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_uses_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(IDLParser.KW_USES)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1296
                self.match(IDLParser.KW_MULTIPLE)


            self.state = 1299
            self.interface_type()
            self.state = 1300
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Emits_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EMITS(self):
            return self.getToken(IDLParser.KW_EMITS, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_emits_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmits_decl" ):
                listener.enterEmits_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmits_decl" ):
                listener.exitEmits_decl(self)




    def emits_decl(self):

        localctx = IDLParser.Emits_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_emits_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(IDLParser.KW_EMITS)
            self.state = 1303
            self.a_scoped_name()
            self.state = 1304
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publishes_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PUBLISHES(self):
            return self.getToken(IDLParser.KW_PUBLISHES, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_publishes_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishes_decl" ):
                listener.enterPublishes_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishes_decl" ):
                listener.exitPublishes_decl(self)




    def publishes_decl(self):

        localctx = IDLParser.Publishes_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_publishes_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self.match(IDLParser.KW_PUBLISHES)
            self.state = 1307
            self.a_scoped_name()
            self.state = 1308
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Consumes_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONSUMES(self):
            return self.getToken(IDLParser.KW_CONSUMES, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_consumes_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConsumes_decl" ):
                listener.enterConsumes_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConsumes_decl" ):
                listener.exitConsumes_decl(self)




    def consumes_decl(self):

        localctx = IDLParser.Consumes_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_consumes_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(IDLParser.KW_CONSUMES)
            self.state = 1311
            self.a_scoped_name()
            self.state = 1312
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def home_header(self):
            return self.getTypedRuleContext(IDLParser.Home_headerContext,0)


        def home_body(self):
            return self.getTypedRuleContext(IDLParser.Home_bodyContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_decl" ):
                listener.enterHome_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_decl" ):
                listener.exitHome_decl(self)




    def home_decl(self):

        localctx = IDLParser.Home_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_home_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.home_header()
            self.state = 1315
            self.home_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HOME(self):
            return self.getToken(IDLParser.KW_HOME, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def KW_MANAGES(self):
            return self.getToken(IDLParser.KW_MANAGES, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def home_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Home_inheritance_specContext,0)


        def supported_interface_spec(self):
            return self.getTypedRuleContext(IDLParser.Supported_interface_specContext,0)


        def primary_key_spec(self):
            return self.getTypedRuleContext(IDLParser.Primary_key_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_header" ):
                listener.enterHome_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_header" ):
                listener.exitHome_header(self)




    def home_header(self):

        localctx = IDLParser.Home_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_home_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self.match(IDLParser.KW_HOME)
            self.state = 1318
            self.identifier()
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1319
                self.home_inheritance_spec()


            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1322
                self.supported_interface_spec()


            self.state = 1325
            self.match(IDLParser.KW_MANAGES)
            self.state = 1326
            self.a_scoped_name()
            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 1327
                self.primary_key_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_inheritance_spec" ):
                listener.enterHome_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_inheritance_spec" ):
                listener.exitHome_inheritance_spec(self)




    def home_inheritance_spec(self):

        localctx = IDLParser.Home_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_home_inheritance_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(IDLParser.COLON)
            self.state = 1331
            self.a_scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_key_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PRIMARYKEY(self):
            return self.getToken(IDLParser.KW_PRIMARYKEY, 0)

        def a_scoped_name(self):
            return self.getTypedRuleContext(IDLParser.A_scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_primary_key_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_key_spec" ):
                listener.enterPrimary_key_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_key_spec" ):
                listener.exitPrimary_key_spec(self)




    def primary_key_spec(self):

        localctx = IDLParser.Primary_key_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_primary_key_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(IDLParser.KW_PRIMARYKEY)
            self.state = 1334
            self.a_scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def home_export(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Home_exportContext)
            else:
                return self.getTypedRuleContext(IDLParser.Home_exportContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_home_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_body" ):
                listener.enterHome_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_body" ):
                listener.exitHome_body(self)




    def home_body(self):

        localctx = IDLParser.Home_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_home_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2135193818125828096) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844152069138649) != 0):
                self.state = 1337
                self.home_export()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1343
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_exportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def export_(self):
            return self.getTypedRuleContext(IDLParser.Export_Context,0)


        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def factory_decl(self):
            return self.getTypedRuleContext(IDLParser.Factory_declContext,0)


        def finder_decl(self):
            return self.getTypedRuleContext(IDLParser.Finder_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_export

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_export" ):
                listener.enterHome_export(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_export" ):
                listener.exitHome_export(self)




    def home_export(self):

        localctx = IDLParser.Home_exportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_home_export)
        try:
            self.state = 1353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                self.export_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.annapps()
                self.state = 1349
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [67]:
                    self.state = 1347
                    self.factory_decl()
                    pass
                elif token in [52]:
                    self.state = 1348
                    self.finder_decl()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1351
                self.match(IDLParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factory_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FACTORY(self):
            return self.getToken(IDLParser.KW_FACTORY, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def init_param_decls(self):
            return self.getTypedRuleContext(IDLParser.Init_param_declsContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_factory_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactory_decl" ):
                listener.enterFactory_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactory_decl" ):
                listener.exitFactory_decl(self)




    def factory_decl(self):

        localctx = IDLParser.Factory_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_factory_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(IDLParser.KW_FACTORY)
            self.state = 1356
            self.identifier()
            self.state = 1357
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==58:
                self.state = 1358
                self.init_param_decls()


            self.state = 1361
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1362
                self.raises_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finder_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FINDER(self):
            return self.getToken(IDLParser.KW_FINDER, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def init_param_decls(self):
            return self.getTypedRuleContext(IDLParser.Init_param_declsContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_finder_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinder_decl" ):
                listener.enterFinder_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinder_decl" ):
                listener.exitFinder_decl(self)




    def finder_decl(self):

        localctx = IDLParser.Finder_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_finder_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(IDLParser.KW_FINDER)
            self.state = 1366
            self.identifier()
            self.state = 1367
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==58:
                self.state = 1368
                self.init_param_decls()


            self.state = 1371
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1372
                self.raises_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_decl(self):
            return self.getTypedRuleContext(IDLParser.Event_declContext,0)


        def event_abs_decl(self):
            return self.getTypedRuleContext(IDLParser.Event_abs_declContext,0)


        def event_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Event_forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent" ):
                listener.enterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent" ):
                listener.exitEvent(self)




    def event(self):

        localctx = IDLParser.EventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_event)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1375
                self.event_decl()
                pass

            elif la_ == 2:
                self.state = 1376
                self.event_abs_decl()
                pass

            elif la_ == 3:
                self.state = 1377
                self.event_forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EVENTTYPE(self):
            return self.getToken(IDLParser.KW_EVENTTYPE, 0)

        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_event_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_forward_decl" ):
                listener.enterEvent_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_forward_decl" ):
                listener.exitEvent_forward_decl(self)




    def event_forward_decl(self):

        localctx = IDLParser.Event_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_event_forward_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 1380
                self.match(IDLParser.KW_ABSTRACT)


            self.state = 1383
            self.match(IDLParser.KW_EVENTTYPE)
            self.state = 1384
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_abs_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_EVENTTYPE(self):
            return self.getToken(IDLParser.KW_EVENTTYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def export_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Export_Context)
            else:
                return self.getTypedRuleContext(IDLParser.Export_Context,i)


        def getRuleIndex(self):
            return IDLParser.RULE_event_abs_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_abs_decl" ):
                listener.enterEvent_abs_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_abs_decl" ):
                listener.exitEvent_abs_decl(self)




    def event_abs_decl(self):

        localctx = IDLParser.Event_abs_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_event_abs_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            self.match(IDLParser.KW_ABSTRACT)
            self.state = 1387
            self.match(IDLParser.KW_EVENTTYPE)
            self.state = 1388
            self.identifier()
            self.state = 1389
            self.value_inheritance_spec()
            self.state = 1390
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2139697417753198592) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844152069138641) != 0):
                self.state = 1391
                self.export_()
                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1397
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_header(self):
            return self.getTypedRuleContext(IDLParser.Event_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def value_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Value_elementContext)
            else:
                return self.getTypedRuleContext(IDLParser.Value_elementContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_event_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_decl" ):
                listener.enterEvent_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_decl" ):
                listener.exitEvent_decl(self)




    def event_decl(self):

        localctx = IDLParser.Event_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_event_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.event_header()
            self.state = 1400
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -950747116127387648) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 844152069138649) != 0):
                self.state = 1401
                self.value_element()
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1407
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EVENTTYPE(self):
            return self.getToken(IDLParser.KW_EVENTTYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(IDLParser.IdentifierContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def KW_CUSTOM(self):
            return self.getToken(IDLParser.KW_CUSTOM, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_event_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_header" ):
                listener.enterEvent_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_header" ):
                listener.exitEvent_header(self)




    def event_header(self):

        localctx = IDLParser.Event_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_event_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 1409
                self.match(IDLParser.KW_CUSTOM)


            self.state = 1412
            self.match(IDLParser.KW_EVENTTYPE)
            self.state = 1413
            self.identifier()
            self.state = 1414
            self.value_inheritance_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnappsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_appl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Annotation_applContext)
            else:
                return self.getTypedRuleContext(IDLParser.Annotation_applContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_annapps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnapps" ):
                listener.enterAnnapps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnapps" ):
                listener.exitAnnapps(self)




    def annapps(self):

        localctx = IDLParser.AnnappsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_annapps)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1416
                    self.annotation_appl() 
                self.state = 1421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_applContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(IDLParser.AT, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def annotation_appl_params(self):
            return self.getTypedRuleContext(IDLParser.Annotation_appl_paramsContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_annotation_appl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_appl" ):
                listener.enterAnnotation_appl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_appl" ):
                listener.exitAnnotation_appl(self)




    def annotation_appl(self):

        localctx = IDLParser.Annotation_applContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_annotation_appl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(IDLParser.AT)
            self.state = 1423
            self.scoped_name()
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 1424
                self.match(IDLParser.LEFT_BRACKET)
                self.state = 1425
                self.annotation_appl_params()
                self.state = 1426
                self.match(IDLParser.RIGHT_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_appl_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def annotation_appl_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Annotation_appl_paramContext)
            else:
                return self.getTypedRuleContext(IDLParser.Annotation_appl_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMMA)
            else:
                return self.getToken(IDLParser.COMMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_annotation_appl_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_appl_params" ):
                listener.enterAnnotation_appl_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_appl_params" ):
                listener.exitAnnotation_appl_params(self)




    def annotation_appl_params(self):

        localctx = IDLParser.Annotation_appl_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_annotation_appl_params)
        self._la = 0 # Token type
        try:
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1430
                self.const_exp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self.annotation_appl_param()
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13:
                    self.state = 1432
                    self.match(IDLParser.COMMA)
                    self.state = 1433
                    self.annotation_appl_param()
                    self.state = 1438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_appl_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def EQUAL(self):
            return self.getToken(IDLParser.EQUAL, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation_appl_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_appl_param" ):
                listener.enterAnnotation_appl_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_appl_param" ):
                listener.exitAnnotation_appl_param(self)




    def annotation_appl_param(self):

        localctx = IDLParser.Annotation_appl_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_annotation_appl_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(IDLParser.ID)
            self.state = 1442
            self.match(IDLParser.EQUAL)
            self.state = 1443
            self.const_exp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annapps(self):
            return self.getTypedRuleContext(IDLParser.AnnappsContext,0)


        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = IDLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.annapps()
            self.state = 1446
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx






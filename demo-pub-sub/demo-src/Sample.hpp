// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Sample.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__SAMPLE_HPP
#define FAST_DDS_GENERATED__SAMPLE_HPP

#include <array>
#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SAMPLE_SOURCE)
#define SAMPLE_DllAPI __declspec( dllexport )
#else
#define SAMPLE_DllAPI __declspec( dllimport )
#endif // SAMPLE_SOURCE
#else
#define SAMPLE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SAMPLE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure A defined by the user in the IDL file.
 * @ingroup Sample
 */
class A
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport A()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~A()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A(
            const A& x)
    {
                    m_x = x.m_x;

                    m_y = x.m_y;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A(
            A&& x) noexcept
    {
        m_x = x.m_x;
        m_y = x.m_y;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A& operator =(
            const A& x)
    {

                    m_x = x.m_x;

                    m_y = x.m_y;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A& operator =(
            A&& x) noexcept
    {

        m_x = x.m_x;
        m_y = x.m_y;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x A object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const A& x) const
    {
        return (m_x == x.m_x &&
           m_y == x.m_y);
    }

    /*!
     * @brief Comparison operator.
     * @param x A object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const A& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            float _x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport float x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport float& x()
    {
        return m_x;
    }


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            bool _y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport bool y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport bool& y()
    {
        return m_y;
    }



private:

    float m_x{0.0};
    bool m_y{false};

};
/*!
 * @brief This class represents the structure B defined by the user in the IDL file.
 * @ingroup Sample
 */
class B
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport B()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~B()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object B that will be copied.
     */
    eProsima_user_DllExport B(
            const B& x)
    {
                    m_aVal = x.m_aVal;

                    m_b = x.m_b;

                    m_c = x.m_c;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object B that will be copied.
     */
    eProsima_user_DllExport B(
            B&& x) noexcept
    {
        m_aVal = std::move(x.m_aVal);
        m_b = std::move(x.m_b);
        m_c = std::move(x.m_c);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object B that will be copied.
     */
    eProsima_user_DllExport B& operator =(
            const B& x)
    {

                    m_aVal = x.m_aVal;

                    m_b = x.m_b;

                    m_c = x.m_c;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object B that will be copied.
     */
    eProsima_user_DllExport B& operator =(
            B&& x) noexcept
    {

        m_aVal = std::move(x.m_aVal);
        m_b = std::move(x.m_b);
        m_c = std::move(x.m_c);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x B object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const B& x) const
    {
        return (m_aVal == x.m_aVal &&
           m_b == x.m_b &&
           m_c == x.m_c);
    }

    /*!
     * @brief Comparison operator.
     * @param x B object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const B& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member aVal
     * @param _aVal New value to be copied in member aVal
     */
    eProsima_user_DllExport void aVal(
            const A& _aVal)
    {
        m_aVal = _aVal;
    }

    /*!
     * @brief This function moves the value in member aVal
     * @param _aVal New value to be moved in member aVal
     */
    eProsima_user_DllExport void aVal(
            A&& _aVal)
    {
        m_aVal = std::move(_aVal);
    }

    /*!
     * @brief This function returns a constant reference to member aVal
     * @return Constant reference to member aVal
     */
    eProsima_user_DllExport const A& aVal() const
    {
        return m_aVal;
    }

    /*!
     * @brief This function returns a reference to member aVal
     * @return Reference to member aVal
     */
    eProsima_user_DllExport A& aVal()
    {
        return m_aVal;
    }


    /*!
     * @brief This function copies the value in member b
     * @param _b New value to be copied in member b
     */
    eProsima_user_DllExport void b(
            const std::array<int16_t, 3>& _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function moves the value in member b
     * @param _b New value to be moved in member b
     */
    eProsima_user_DllExport void b(
            std::array<int16_t, 3>&& _b)
    {
        m_b = std::move(_b);
    }

    /*!
     * @brief This function returns a constant reference to member b
     * @return Constant reference to member b
     */
    eProsima_user_DllExport const std::array<int16_t, 3>& b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport std::array<int16_t, 3>& b()
    {
        return m_b;
    }


    /*!
     * @brief This function copies the value in member c
     * @param _c New value to be copied in member c
     */
    eProsima_user_DllExport void c(
            const std::vector<std::string>& _c)
    {
        m_c = _c;
    }

    /*!
     * @brief This function moves the value in member c
     * @param _c New value to be moved in member c
     */
    eProsima_user_DllExport void c(
            std::vector<std::string>&& _c)
    {
        m_c = std::move(_c);
    }

    /*!
     * @brief This function returns a constant reference to member c
     * @return Constant reference to member c
     */
    eProsima_user_DllExport const std::vector<std::string>& c() const
    {
        return m_c;
    }

    /*!
     * @brief This function returns a reference to member c
     * @return Reference to member c
     */
    eProsima_user_DllExport std::vector<std::string>& c()
    {
        return m_c;
    }



private:

    A m_aVal;
    std::array<int16_t, 3> m_b{0};
    std::vector<std::string> m_c;

};

#endif // _FAST_DDS_GENERATED_SAMPLE_HPP_


